 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_SL~1\I2C_SL~1\I2C_SL~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 18
 0000           ; // I2C-UART slave
 0000           ; // CY8C29466-24PXI(DIP Package)
 0000           ; // PSoC Designer 5.0 + SP6
 0000           ; // IMAGECRAFT C Compiler
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #define _BV(BIT) (1<<BIT)
 0000           ; #define sbi(BYTE,BIT) (BYTE |= _BV(BIT))
 0000           ; #define cbi(BYTE,BIT) (BYTE &= ~_BV(BIT))
 0000           ; #define LED_ON() sbi(PRT2DR, 0)
 0000           ; #define LED_OFF() cbi(PRT2DR, 0)
 0000           ; #define bit_is_set(BYTE, BIT) BYTE & BIT
 0000           ; #define SW_PORT PRT2DR
 0000           ; #define SW_BIT _BV(2) // switch
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 19
 0000           ;     M8C_EnableGInt;
 0000 7101                      or  F, 01h
 0002           
 0002                   .dbline 20
 0002           ;     M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
 0002 43E020            or REG[0xe0],32
 0005                   .dbline 21
 0005           ;     LED_ON();
 0005 430801            or REG[0x8],1
 0008           L2:
 0008                   .dbline 23
 0008           ; 
 0008           ;     while(1){
 0008                   .dbline 24
 0008           ;     }
 0008           L3:
 0008                   .dbline 23
 0008 8FFF              xjmp L2
 000A           X0:
 000A                   .dbline -2
 000A           L1:
 000A                   .dbline 0 ; func end
 000A 8FFF              jmp .
 000C                   .dbend
 000C                   .dbfunc e INT_GPIO _INT_GPIO fV
 000C           _INT_GPIO::
 000C                   .dbline -1
 000C 71C0              or F,-64
 000E 08                push A
 000F 5DD0              mov A,REG[0xd0]
 0011 08                push A
 0012 62D000            mov REG[0xd0],>__r0
 0015 5100              mov A,[__r0]
 0017 08                push A
 0018                   .dbline 28
 0018           ; }
 0018           ; 
 0018           ; #pragma interrupt_handler INT_GPIO
 0018           ; void INT_GPIO(void){
 0018                   .dbline 29
 0018           ;     if(bit_is_set(SW_PORT, SW_BIT)){
 0018 5D08              mov A,REG[0x8]
 001A 62D000            mov REG[0xd0],>__r0
 001D 5300              mov [__r0],A
 001F 470004            tst [__r0],4
 0022 A006              jz L6
 0024                   .dbline 29
 0024                   .dbline 30
 0024           ;         LED_ON();
 0024 430801            or REG[0x8],1
 0027                   .dbline 31
 0027           ;     }
 0027 8004              xjmp L7
 0029           L6:
 0029                   .dbline 32
 0029           ;     else{
 0029                   .dbline 33
 0029           ;         LED_OFF();
 0029 4108FE            and REG[0x8],-2
 002C                   .dbline 34
 002C           ;     }
 002C           L7:
 002C                   .dbline -2
 002C           L5:
 002C 62D000            mov REG[0xD0],>__r0
 002F 18                pop A
 0030 5300              mov [__r0],A
 0032 18                pop A
 0033 60D0              mov REG[208],A
 0035 18                pop A
 0036                   .dbline 0 ; func end
 0036 7E                reti
 0037                   .dbend
