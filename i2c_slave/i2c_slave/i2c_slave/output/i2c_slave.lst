FILE: .\boot.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.18
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0002: 30       HALT                     
0003: 30       HALT                     
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0005: 30       HALT                     
0006: 30       HALT                     
0007: 30       HALT                     
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
0009: 30       HALT                     
000A: 30       HALT                     
000B: 30       HALT                     
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
000D: 30       HALT                     
000E: 30       HALT                     
000F: 30       HALT                     
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0011: 30       HALT                     
0012: 30       HALT                     
0013: 30       HALT                     
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0015: 30       HALT                     
0016: 30       HALT                     
0017: 30       HALT                     
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
0019: 30       HALT                     
001A: 30       HALT                     
001B: 30       HALT                     
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0145)     // call	void_handler
001D: 30       HALT                     
001E: 30       HALT                     
001F: 30       HALT                     
0020: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0021: 30       HALT                     
0022: 30       HALT                     
0023: 30       HALT                     
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0153)     // call	void_handler
0025: 30       HALT                     
0026: 30       HALT                     
0027: 30       HALT                     
0028: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0157)     // call	void_handler
0029: 30       HALT                     
002A: 30       HALT                     
002B: 30       HALT                     
002C: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
002D: 30       HALT                     
002E: 30       HALT                     
002F: 30       HALT                     
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0031: 30       HALT                     
0032: 30       HALT                     
0033: 30       HALT                     
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0035: 30       HALT                     
0036: 30       HALT                     
0037: 30       HALT                     
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
0039: 30       HALT                     
003A: 30       HALT                     
003B: 30       HALT                     
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
003D: 30       HALT                     
003E: 30       HALT                     
003F: 30       HALT                     
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0041: 30       HALT                     
0042: 30       HALT                     
0043: 30       HALT                     
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0045: 30       HALT                     
0046: 30       HALT                     
0047: 30       HALT                     
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
0049: 30       HALT                     
004A: 30       HALT                     
004B: 30       HALT                     
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
004D: 30       HALT                     
004E: 30       HALT                     
004F: 30       HALT                     
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0051: 30       HALT                     
0052: 30       HALT                     
0053: 30       HALT                     
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0055: 30       HALT                     
0056: 30       HALT                     
0057: 30       HALT                     
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
0059: 30       HALT                     
005A: 30       HALT                     
005B: 30       HALT                     
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
005D: 30       HALT                     
005E: 30       HALT                     
005F: 30       HALT                     
0060: 7D 03 64 LJMP  0x0364             (0209)     ljmp	_I2CHW_1_ISR
0063: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
0065: 30       HALT                     
0066: 30       HALT                     
0067: 30       HALT                     
0068: 71 10    OR    F,0x10             (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0249)     M8C_EnableWatchDog
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) IF ( SELECT_32K )
                                        (0253)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0254) ELSE
007B: 41 FE FB AND   REG[0xFE],0xFB     (0255)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0256) ENDIF
                                        (0257) 
                                        (0258)     ;---------------------------
                                        (0259)     ; Set up the Temporary stack
                                        (0260)     ;---------------------------
                                        (0261)     ; A temporary stack is set up for the SSC instructions.
                                        (0262)     ; The real stack start will be assigned later.
                                        (0263)     ;
                                        (0264) _stack_start:          equ 80h
007E: 50 80    MOV   A,0x80             (0265)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0080: 4E       SWAP  SP,A               (0266)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0267) 
                                        (0268)     ;-----------------------------------------------
                                        (0269)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0270)     ;-----------------------------------------------
                                        (0271) 
                                        (0272) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0273)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0274)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0275)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0276)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0277)   IF ( AGND_BYPASS )
                                        (0278)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0279)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0280)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0281)     ; value using the proper trim values.
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0284)   ENDIF
                                        (0285)  ENDIF
                                        (0286) ENDIF ; 5.0 V Operation
                                        (0287) 
                                        (0288) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0289)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0290)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0291)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0292)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0293)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ENDIF
                                        (0295) ENDIF ; 3.3 Volt Operation
                                        (0296) 
0081: 55 F8 00 MOV   [iles+233],0x0     (0297)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0084: 55 F9 00 MOV   [iles+234],0x0     (0298)     mov  [bSSC_KEYSP], 0
                                        (0299) 
                                        (0300)     ;---------------------------------------
                                        (0301)     ; Initialize Crystal Oscillator and PLL
                                        (0302)     ;---------------------------------------
                                        (0303) 
                                        (0304) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0305)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0306)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0307)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0308)     ; the ECO to stabilize.
                                        (0309)     ;
                                        (0310)     M8C_SetBank1
                                        (0311)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0312)     M8C_SetBank0
                                        (0313)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0314)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0315)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0316) .WaitFor1s:
                                        (0317)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0318)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0319)                                           ;   since interrupts are not globally enabled
                                        (0320) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0321)     ; Either no ECO, or waiting for stable clock is to be done in main
0087: 71 10    OR    F,0x10             (0322)     M8C_SetBank1
0089: 62 E0 02 MOV   REG[0xE0],0x2      (0323)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008C: 70 EF    AND   F,0xEF             (0324)     M8C_SetBank0
008E: 62 E3 38 MOV   REG[0xE3],0x38     (0325)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0326) 
                                        (0327) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0328) 
                                        (0329) IF ( PLL_MODE )
                                        (0330)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0331)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0332)     ;
                                        (0333)     M8C_SetBank1
                                        (0334)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0335)     M8C_SetBank0
                                        (0336)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0337)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0338) 
                                        (0339) .WaitFor16ms:
                                        (0340)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0341)     jz   .WaitFor16ms
                                        (0342)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0343)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0344)     M8C_SetBank0
                                        (0345) 
                                        (0346) IF      ( WAIT_FOR_32K )
                                        (0347) ELSE ; !( WAIT_FOR_32K )
                                        (0348)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0349)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0350) ENDIF ;(WAIT_FOR_32K)
                                        (0351) ENDIF ;(PLL_MODE)
                                        (0352) 
                                        (0353)     ;------------------------
                                        (0354)     ; Close CT leakage path.
                                        (0355)     ;------------------------
0091: 62 71 05 MOV   REG[0x71],0x5      (0356)     mov   reg[ACB00CR0], 05h
0094: 62 75 05 MOV   REG[0x75],0x5      (0357)     mov   reg[ACB01CR0], 05h
0097: 62 79 05 MOV   REG[0x79],0x5      (0358)     mov   reg[ACB02CR0], 05h
009A: 62 7D 05 MOV   REG[0x7D],0x5      (0359)     mov   reg[ACB03CR0], 05h
                                        (0360) 
                                        (0361) 
                                        (0362) IF	(TOOLCHAIN & HITECH)
                                        (0363)     ;---------------------------------------------
                                        (0364)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0365)     ;---------------------------------------------
                                        (0366) 	global		__Lstackps
                                        (0367) 	mov     a,low __Lstackps
                                        (0368) 	swap    a,sp
                                        (0369) 
                                        (0370) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0371)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0372)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0373)     RAM_SETPAGE_CUR 0
                                        (0374)     RAM_SETPAGE_MVW 0
                                        (0375)     RAM_SETPAGE_MVR 0
                                        (0376)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0377)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0378)     ELSE
                                        (0379)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0380)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0381) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0382) ELSE
                                        (0383)     ;---------------------------------------------
                                        (0384)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0385)     ;---------------------------------------------
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
009D: 62 D1 07 MOV   REG[0xD1],0x7      (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A0: 50 00    MOV   A,0x0              (0388)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A2: 4E       SWAP  SP,A               (0389)     swap  A, SP
00A3: 62 D3 07 MOV   REG[0xD3],0x7      (0390)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00A6: 62 D0 00 MOV   REG[0xD0],0x0      (0391)     RAM_SETPAGE_CUR 0
00A9: 62 D5 00 MOV   REG[0xD5],0x0      (0392)     RAM_SETPAGE_MVW 0
00AC: 62 D4 00 MOV   REG[0xD4],0x0      (0393)     RAM_SETPAGE_MVR 0
                                        (0394) 
                                        (0395)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00AF: 71 C0    OR    F,0xC0             (0396)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0397)   ELSE
                                        (0398)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0399)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0400) ELSE
                                        (0401)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0402)     swap  SP, A
                                        (0403) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0404) ENDIF ;	TOOLCHAIN
                                        (0405) 
                                        (0406)     ;-------------------------
                                        (0407)     ; Load Base Configuration
                                        (0408)     ;-------------------------
                                        (0409)     ; Load global parameter settings and load the user modules in the
                                        (0410)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0411)     ; to minimize start up time; (2) We may still need to play with the
                                        (0412)     ; Sleep Timer.
                                        (0413)     ;
00B1: 7C 03 01 LCALL 0x0301             (0414)     lcall LoadConfigInit
                                        (0415) 
                                        (0416)     ;-----------------------------------
                                        (0417)     ; Initialize C Run-Time Environment
                                        (0418)     ;-----------------------------------
                                        (0419) IF ( C_LANGUAGE_SUPPORT )
                                        (0420) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0421)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0422)     mov  [__r0],<__bss_start
                                        (0423) BssLoop:
                                        (0424)     cmp  [__r0],<__bss_end
                                        (0425)     jz   BssDone
                                        (0426)     mvi  [__r0],A
                                        (0427)     jmp  BssLoop
                                        (0428) BssDone:
                                        (0429)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0430)     mov  X,<__idata_start
                                        (0431)     mov  [__r0],<__data_start
                                        (0432) IDataLoop:
                                        (0433)     cmp  [__r0],<__data_end
                                        (0434)     jz   C_RTE_Done
                                        (0435)     push A
                                        (0436)     romx
                                        (0437)     mvi  [__r0],A
                                        (0438)     pop  A
                                        (0439)     inc  X
                                        (0440)     adc  A,0
                                        (0441)     jmp  IDataLoop
                                        (0442) 
                                        (0443) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0444) 
                                        (0445) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B4: 62 D0 00 MOV   REG[0xD0],0x0      (0446)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0447)                                        ; to use the Virtual Register page.
                                        (0448) 
                                        (0449)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0450)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0451)     ; text segment and may have been relocated by the Code Compressor.
                                        (0452)     ;
00B7: 50 02    MOV   A,0x2              (0453)     mov   A, >__pXIData                ; Get the address of the flash
00B9: 57 FF    MOV   X,0xFF             (0454)     mov   X, <__pXIData                ;   pointer to the xidata area.
00BB: 08       PUSH  A                  (0455)     push  A
00BC: 28       ROMX                     (0456)     romx                               ; get the MSB of xidata's address
00BD: 53 09    MOV   [__r0],A           (0457)     mov   [__r0], A
00BF: 18       POP   A                  (0458)     pop   A
00C0: 75       INC   X                  (0459)     inc   X
00C1: 09 00    ADC   A,0x0              (0460)     adc   A, 0
00C3: 28       ROMX                     (0461)     romx                               ; get the LSB of xidata's address
00C4: 4B       SWAP  A,X                (0462)     swap  A, X
00C5: 51 09    MOV   A,[__r0]           (0463)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0464)                                        ;   XIData structure list in flash
00C7: 80 04    JMP   0x00CC             (0465)     jmp   .AccessStruct
                                        (0466) 
                                        (0467)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0468)     ; values of C variables. Each structure contains 3 member elements.
                                        (0469)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0470)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0471)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0472)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0473)     ; value in the second member element, an unsigned byte:
                                        (0474)     ; (1) If the value of the second element is non-zero, it represents
                                        (0475)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0476)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0477)     ; the bytes are copied to the block of RAM.
                                        (0478)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0479)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0480)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0481) 
                                        (0482) .AccessNextStructLoop:
00C9: 75       INC   X                  (0483)     inc   X                            ; pXIData++
00CA: 09 00    ADC   A,0x0              (0484)     adc   A, 0
                                        (0485) .AccessStruct:                         ; Entry point for first block
                                        (0486)     ;
                                        (0487)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0488)     ;
00CC: 62 E3 00 MOV   REG[0xE3],0x0      (0489)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CF: 08       PUSH  A                  (0490)     push  A
00D0: 28       ROMX                     (0491)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D1: 60 D5    MOV   REG[0xD5],A        (0492)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D3: 74       INC   A                  (0493)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D4: A0 4B    JZ    0x0120             (0494)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D6: 18       POP   A                  (0495)     pop   A                            ; restore pXIData to [A,X]
00D7: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D8: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00DA: 08       PUSH  A                  (0498)     push  A
00DB: 28       ROMX                     (0499)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00DC: 53 09    MOV   [__r0],A           (0500)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00DE: 18       POP   A                  (0501)     pop   A                            ; restore pXIData to [A,X]
00DF: 75       INC   X                  (0502)     inc   X                            ; pXIData++ (point to size)
00E0: 09 00    ADC   A,0x0              (0503)     adc   A, 0
00E2: 08       PUSH  A                  (0504)     push  A
00E3: 28       ROMX                     (0505)     romx                               ; Get the size (CPU.A <- *pXIData)
00E4: A0 1C    JZ    0x0101             (0506)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E6: 53 08    MOV   [__r1],A           (0507)     mov   [__r1], A                    ;             else downcount in __r1
00E8: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
                                        (0509) 
                                        (0510) .CopyNextByteLoop:
                                        (0511)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0512)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0513)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0514)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0515)     ;
00E9: 75       INC   X                  (0516)     inc   X                            ; pXIData++ (point to next data byte)
00EA: 09 00    ADC   A,0x0              (0517)     adc   A, 0
00EC: 08       PUSH  A                  (0518)     push  A
00ED: 28       ROMX                     (0519)     romx                               ; Get the data value (CPU.A <- *pXIData)
00EE: 3F 09    MVI   [__r0],A           (0520)     mvi   [__r0], A                    ; Transfer the data to RAM
00F0: 47 09 FF TST   [__r0],0xFF        (0521)     tst   [__r0], 0xff                 ; Check for page crossing
00F3: B0 06    JNZ   0x00FA             (0522)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F5: 5D D5    MOV   A,REG[0xD5]        (0523)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F7: 74       INC   A                  (0524)     inc   A
00F8: 60 D5    MOV   REG[0xD5],A        (0525)     mov   reg[ MVW_PP], A
                                        (0526) .CopyLoopTail:
00FA: 18       POP   A                  (0527)     pop   A                            ; restore pXIData to [A,X]
00FB: 7A 08    DEC   [__r1]             (0528)     dec   [__r1]                       ; End of this array in flash?
00FD: BF EB    JNZ   0x00E9             (0529)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FF: 8F C9    JMP   0x00C9             (0530)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0531) 
                                        (0532) .ClearRAMBlockToZero:
0101: 18       POP   A                  (0533)     pop   A                            ; restore pXIData to [A,X]
0102: 75       INC   X                  (0534)     inc   X                            ; pXIData++ (point to next data byte)
0103: 09 00    ADC   A,0x0              (0535)     adc   A, 0
0105: 08       PUSH  A                  (0536)     push  A
0106: 28       ROMX                     (0537)     romx                               ; Get the run length (CPU.A <- *pXIData)
0107: 53 08    MOV   [__r1],A           (0538)     mov   [__r1], A                    ; Initialize downcounter
0109: 50 00    MOV   A,0x0              (0539)     mov   A, 0                         ; Initialize source data
                                        (0540) 
                                        (0541) .ClearRAMBlockLoop:
                                        (0542)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0543)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0544)     ;
010B: 3F 09    MVI   [__r0],A           (0545)     mvi   [__r0], A                    ; Clear a byte
010D: 47 09 FF TST   [__r0],0xFF        (0546)     tst   [__r0], 0xff                 ; Check for page crossing
0110: B0 08    JNZ   0x0119             (0547)     jnz   .ClearLoopTail               ;   No crossing, keep going
0112: 5D D5    MOV   A,REG[0xD5]        (0548)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0114: 74       INC   A                  (0549)     inc   A
0115: 60 D5    MOV   REG[0xD5],A        (0550)     mov   reg[ MVW_PP], A
0117: 50 00    MOV   A,0x0              (0551)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0552) .ClearLoopTail:
0119: 7A 08    DEC   [__r1]             (0553)     dec   [__r1]                       ; Was this the last byte?
011B: BF EF    JNZ   0x010B             (0554)     jnz   .ClearRAMBlockLoop           ;   No,  continue
011D: 18       POP   A                  (0555)     pop   A                            ;   Yes, restore pXIData to [A,X] and
011E: 8F AA    JMP   0x00C9             (0556)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0557) 
                                        (0558) .C_RTE_WrapUp:
0120: 18       POP   A                  (0559)     pop   A                            ; balance stack
                                        (0560) 
                                        (0561) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0562) 
                                        (0563) C_RTE_Done:
                                        (0564) 
                                        (0565) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0566) 
                                        (0567)     ;-------------------------------
                                        (0568)     ; Voltage Stabilization for SMP
                                        (0569)     ;-------------------------------
                                        (0570) 
                                        (0571) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0572) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0573)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0574)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0575)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0576)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0577)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0578)     M8C_SetBank1
                                        (0579)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0580)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0581)     M8C_SetBank0
                                        (0582)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0583)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0584) .WaitFor2ms:
                                        (0585)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0586)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0587) ENDIF ; SMP is operational
                                        (0588) ENDIF ; 5.0V Operation
                                        (0589) 
                                        (0590)     ;-------------------------------
                                        (0591)     ; Set Power-On Reset (POR) Level
                                        (0592)     ;-------------------------------
                                        (0593) 
                                        (0594)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0595)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0596)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0597)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0598)     ;  lead to corruption of PSoC flash.
                                        (0599) 
0121: 71 10    OR    F,0x10             (0600)     M8C_SetBank1
                                        (0601) 
                                        (0602) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0603)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0604)  ELSE                                       ;    No, fast mode
                                        (0605)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0606)                                             ;       no, set midpoint POR in user code, if desired
                                        (0607)   ELSE ; 24HMz                              ;
                                        (0608)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0609)   ENDIF ; 24MHz
                                        (0610)  ENDIF ; Slow Mode
                                        (0611) ENDIF ; 5.0V Operation
                                        (0612) 
0123: 70 EF    AND   F,0xEF             (0613)     M8C_SetBank0
                                        (0614) 
                                        (0615)     ;----------------------------
                                        (0616)     ; Wrap up and invoke "main"
                                        (0617)     ;----------------------------
                                        (0618) 
                                        (0619)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0620)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0621)     ;
0125: 62 E0 00 MOV   REG[0xE0],0x0      (0622)     mov  reg[INT_MSK0],0
                                        (0623) 
                                        (0624)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0625)     ; And put decimator in full mode so it does not consume too much current.
                                        (0626)     ;
0128: 71 10    OR    F,0x10             (0627)     M8C_SetBank1
012A: 62 E0 00 MOV   REG[0xE0],0x0      (0628)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
012D: 43 E7 80 OR    REG[0xE7],0x80     (0629)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0130: 70 EF    AND   F,0xEF             (0630)     M8C_SetBank0
                                        (0631) 
                                        (0632)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0633)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0634)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0635)     ;
0132: 62 E2 00 MOV   REG[0xE2],0x0      (0636)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0637)                                    ; have been set during the boot process.
                                        (0638) IF	(TOOLCHAIN & HITECH)
                                        (0639) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0640) ELSE
                                        (0641) IF ENABLE_LJMP_TO_MAIN
                                        (0642)     ljmp  _main                    ; goto main (no return)
                                        (0643) ELSE
0135: 7C 04 7A LCALL _main|__text_start|_main(0644)     lcall _main                    ; call main
                                        (0645) .Exit:
0138: 8F FF    JMP   0x0138             (0646)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0647) ENDIF
                                        (0648) ENDIF ; TOOLCHAIN
                                        (0649) 
                                        (0650)     ;---------------------------------
                                        (0651)     ; Library Access to Global Parms
                                        (0652)     ;---------------------------------
                                        (0653)     ;
                                        (0654)  bGetPowerSetting:
                                        (0655) _bGetPowerSetting:
                                        (0656)     ; Returns value of POWER_SETTING in the A register.
                                        (0657)     ; No inputs. No Side Effects.
                                        (0658)     ;
013A: 50 10    MOV   A,0x10             (0659)     mov   A, POWER_SETTING
013C: 7F       RET                      (0660)     ret
(0661) 
(0662) IF	(TOOLCHAIN & HITECH)
(0663) ELSE
(0664)     ;---------------------------------
(0665)     ; Order Critical RAM & ROM AREAs
(0666)     ;---------------------------------
(0667)     ;  'TOP' is all that has been defined so far...
(0668) 
(0669)     ;  ROM AREAs for C CONST, static & global items
(0670)     ;
(0671)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
(0672)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
(0673) __idata_start:
(0674) 
(0675)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
(0676) __func_lit_start:
(0677) 
(0678) IF ( SYSTEM_LARGE_MEMORY_MODEL )
(0679)     ; We use the func_lit area to store a pointer to extended initialized
(0680)     ; data (xidata) area that follows the text area. Func_lit isn't
(0681)     ; relocated by the code compressor, but the text area may shrink and
(0682)     ; that moves xidata around.
(0683)     ;
(0684) __pXIData:         word __text_end           ; ptr to extended idata
(0685) ENDIF
(0686) 
(0687)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
(0688)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
(0689) 
(0690)     ; CODE segment for general use
(0691)     ;
(0692)     AREA text (ROM, REL, CON)
(0693) __text_start:
(0694) 
(0695)     ; RAM area usage
(0696)     ;
(0697)     AREA data              (RAM, REL, CON)   ; initialized RAM
(0698) __data_start:
(0699) 
(0700)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
(0701)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
(0702)     AREA bss               (RAM, REL, CON)   ; general use
(0703) __bss_start:
(0704) 
(0705) ENDIF ; TOOLCHAIN
(0706) 
(0707) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_i2c_slave_Bank1
                                        (0006) export LoadConfigTBL_i2c_slave_Bank0
                                        (0007) export LoadConfigTBL_i2c_slave_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_i2c_slave_Bank0:
                                        (0010) ;  Instance name I2CHW_1, User Module I2CHW
                                        (0011) ;  Global Register values Bank 0
                                        (0012) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0013) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0014) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0015) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0016) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0017) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0018) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0019) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0020) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0021) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0022) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0023) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0024) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0025) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0026) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0027) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0028) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0029) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0030) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0031) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0032) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0033) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0034) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0035) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0036) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0037) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0038) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0039) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0040) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0041) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0042) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0043) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0044) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0045) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0046) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0047) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0048) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0049) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0050) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0051) 	db		ffh
                                        (0052) LoadConfigTBL_i2c_slave_Bank1:
                                        (0053) ;  Instance name I2CHW_1, User Module I2CHW
                                        (0054) ;  Global Register values Bank 1
                                        (0055) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0056) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0057) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0058) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0059) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0060) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0061) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0062) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0063) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0064) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0065) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0066) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0067) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0068) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0069) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0070) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0071) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0072) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0073) 	db		ffh
                                        (0074) LoadConfigTBL_i2c_slave_Ordered:
                                        (0075) ;  Ordered Global Register values

(0076) 	M8C_SetBank1
0215: 10       PUSH  X                  
0216: 62 00 00 MOV   REG[0x0],0x0       (0077) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0219: 62 01 FF MOV   REG[0x1],0xFF      (0078) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
021C: 70 EF    AND   F,0xEF             (0079) 	M8C_SetBank0
021E: 62 03 FF MOV   REG[0x3],0xFF      (0080) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0221: 62 02 00 MOV   REG[0x2],0x0       (0081) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0224: 71 10    OR    F,0x10             (0082) 	M8C_SetBank1
0226: 62 02 00 MOV   REG[0x2],0x0       (0083) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0229: 62 03 00 MOV   REG[0x3],0x0       (0084) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
022C: 70 EF    AND   F,0xEF             (0085) 	M8C_SetBank0
022E: 62 01 00 MOV   REG[0x1],0x0       (0086) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0231: 71 10    OR    F,0x10             (0087) 	M8C_SetBank1
0233: 62 04 A0 MOV   REG[0x4],0xA0      (0088) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
0236: 62 05 FF MOV   REG[0x5],0xFF      (0089) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0239: 70 EF    AND   F,0xEF             (0090) 	M8C_SetBank0
023B: 62 07 FF MOV   REG[0x7],0xFF      (0091) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
023E: 62 06 00 MOV   REG[0x6],0x0       (0092) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0241: 71 10    OR    F,0x10             (0093) 	M8C_SetBank1
0243: 62 06 00 MOV   REG[0x6],0x0       (0094) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0246: 62 07 00 MOV   REG[0x7],0x0       (0095) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0249: 70 EF    AND   F,0xEF             (0096) 	M8C_SetBank0
024B: 62 05 00 MOV   REG[0x5],0x0       (0097) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
024E: 71 10    OR    F,0x10             (0098) 	M8C_SetBank1
0250: 62 08 01 MOV   REG[0x8],0x1       (0099) 	mov	reg[08h], 01h		; Port_2_DriveMode_0 register (PRT2DM0)
0253: 62 09 FE MOV   REG[0x9],0xFE      (0100) 	mov	reg[09h], feh		; Port_2_DriveMode_1 register (PRT2DM1)
0256: 70 EF    AND   F,0xEF             (0101) 	M8C_SetBank0
0258: 62 0B FE MOV   REG[0xB],0xFE      (0102) 	mov	reg[0bh], feh		; Port_2_DriveMode_2 register (PRT2DM2)
025B: 62 0A 00 MOV   REG[0xA],0x0       (0103) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
025E: 71 10    OR    F,0x10             (0104) 	M8C_SetBank1
0260: 62 0A 00 MOV   REG[0xA],0x0       (0105) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0263: 62 0B 00 MOV   REG[0xB],0x0       (0106) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0266: 70 EF    AND   F,0xEF             (0107) 	M8C_SetBank0
0268: 62 09 00 MOV   REG[0x9],0x0       (0108) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
026B: 71 10    OR    F,0x10             (0109) 	M8C_SetBank1
026D: 62 0C 00 MOV   REG[0xC],0x0       (0110) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0270: 62 0D 00 MOV   REG[0xD],0x0       (0111) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0273: 70 EF    AND   F,0xEF             (0112) 	M8C_SetBank0
0275: 62 0F 00 MOV   REG[0xF],0x0       (0113) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0278: 62 0E 00 MOV   REG[0xE],0x0       (0114) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
027B: 71 10    OR    F,0x10             (0115) 	M8C_SetBank1
027D: 62 0E 00 MOV   REG[0xE],0x0       (0116) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0280: 62 0F 00 MOV   REG[0xF],0x0       (0117) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0283: 70 EF    AND   F,0xEF             (0118) 	M8C_SetBank0
0285: 62 0D 00 MOV   REG[0xD],0x0       (0119) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0288: 71 10    OR    F,0x10             (0120) 	M8C_SetBank1
028A: 62 10 00 MOV   REG[0x10],0x0      (0121) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
028D: 62 11 00 MOV   REG[0x11],0x0      (0122) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0290: 70 EF    AND   F,0xEF             (0123) 	M8C_SetBank0
0292: 62 13 00 MOV   REG[0x13],0x0      (0124) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0295: 62 12 00 MOV   REG[0x12],0x0      (0125) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0298: 71 10    OR    F,0x10             (0126) 	M8C_SetBank1
029A: 62 12 00 MOV   REG[0x12],0x0      (0127) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
029D: 62 13 00 MOV   REG[0x13],0x0      (0128) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02A0: 70 EF    AND   F,0xEF             (0129) 	M8C_SetBank0
02A2: 62 11 00 MOV   REG[0x11],0x0      (0130) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02A5: 71 10    OR    F,0x10             (0131) 	M8C_SetBank1
02A7: 62 14 00 MOV   REG[0x14],0x0      (0132) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02AA: 62 15 00 MOV   REG[0x15],0x0      (0133) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02AD: 70 EF    AND   F,0xEF             (0134) 	M8C_SetBank0
02AF: 62 17 00 MOV   REG[0x17],0x0      (0135) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02B2: 62 16 00 MOV   REG[0x16],0x0      (0136) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02B5: 71 10    OR    F,0x10             (0137) 	M8C_SetBank1
02B7: 62 16 00 MOV   REG[0x16],0x0      (0138) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02BA: 62 17 00 MOV   REG[0x17],0x0      (0139) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02BD: 70 EF    AND   F,0xEF             (0140) 	M8C_SetBank0
02BF: 62 15 00 MOV   REG[0x15],0x0      (0141) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02C2: 71 10    OR    F,0x10             (0142) 	M8C_SetBank1
02C4: 62 18 00 MOV   REG[0x18],0x0      (0143) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02C7: 62 19 00 MOV   REG[0x19],0x0      (0144) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02CA: 70 EF    AND   F,0xEF             (0145) 	M8C_SetBank0
02CC: 62 1B 00 MOV   REG[0x1B],0x0      (0146) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
02CF: 62 1A 00 MOV   REG[0x1A],0x0      (0147) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
02D2: 71 10    OR    F,0x10             (0148) 	M8C_SetBank1
02D4: 62 1A 00 MOV   REG[0x1A],0x0      (0149) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
02D7: 62 1B 00 MOV   REG[0x1B],0x0      (0150) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
02DA: 70 EF    AND   F,0xEF             (0151) 	M8C_SetBank0
02DC: 62 19 00 MOV   REG[0x19],0x0      (0152) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
02DF: 71 10    OR    F,0x10             (0153) 	M8C_SetBank1
02E1: 62 1C 00 MOV   REG[0x1C],0x0      (0154) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
02E4: 62 1D 00 MOV   REG[0x1D],0x0      (0155) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
02E7: 70 EF    AND   F,0xEF             (0156) 	M8C_SetBank0
02E9: 62 1F 00 MOV   REG[0x1F],0x0      (0157) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
02EC: 62 1E 00 MOV   REG[0x1E],0x0      (0158) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
02EF: 71 10    OR    F,0x10             (0159) 	M8C_SetBank1
02F1: 62 1E 00 MOV   REG[0x1E],0x0      (0160) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
02F4: 62 1F 00 MOV   REG[0x1F],0x0      (0161) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
02F7: 70 EF    AND   F,0xEF             (0162) 	M8C_SetBank0
02F9: 62 1D 00 MOV   REG[0x1D],0x0      (0163) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
02FC: 70 EF    AND   F,0xEF             (0164) 	M8C_SetBank0
02FE: 7F       RET                      (0165) 	ret
(0166) 
(0167) 
(0168) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_i2c_slave
                                        (0026) export _LoadConfig_i2c_slave
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     

0301: 7C 03 08 LCALL 0x0308             (0058) 	lcall	LoadConfig_i2c_slave
0304: 7C 02 14 LCALL 0x0214             (0059) 	lcall	LoadConfigTBL_i2c_slave_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0307: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration i2c_slave
                                        (0067) ;
                                        (0068) ;    Load configuration registers for i2c_slave.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_i2c_slave:
                                        (0085)  LoadConfig_i2c_slave:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0308: 10       PUSH  X                  (0088) 	push	x
0309: 70 EF    AND   F,0xEF             (0089)     M8C_SetBank0                    ; Force bank 0
030B: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
030D: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
030E: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_i2c_slave_Bank0
0310: 57 A0    MOV   X,0xA0             (0094)     mov     X, <LoadConfigTBL_i2c_slave_Bank0
0312: 7C 03 23 LCALL 0x0323             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
0315: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0317: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0318: 50 01    MOV   A,0x1              (0100)     mov     A, >LoadConfigTBL_i2c_slave_Bank1
031A: 57 EF    MOV   X,0xEF             (0101)     mov     X, <LoadConfigTBL_i2c_slave_Bank1
031C: 7C 03 23 LCALL 0x0323             (0102)     lcall   LoadConfig              ; Load the bank 1 values
                                        (0103) 
031F: 70 EF    AND   F,0xEF             (0104)     M8C_SetBank0                    ; Force return to bank 0
0321: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0322: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0323: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0325: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0326: 08       PUSH  A                  (0132)     push    A
0327: 4F       MOV   X,SP               (0133)     mov     X, SP
0328: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
032B: D0 04    JNC   0x0330             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
032D: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0330: 18       POP   A                  (0138)     pop     A
0331: 20       POP   X                  (0139)     pop     X
                                        (0140) 
                                        (0141) LoadConfigLp:
0332: 70 EF    AND   F,0xEF             (0142)     M8C_SetBank0                    ; Switch to bank 0
0334: 62 E3 00 MOV   REG[0xE3],0x0      (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0337: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0338: 08       PUSH  A                  (0145)     push    A
0339: 28       ROMX                     (0146)     romx                            ; Load register address from table
033A: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
033C: A0 1F    JZ    0x035C             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
033E: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
033F: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
0342: A0 03    JZ    0x0346             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0344: 71 10    OR    F,0x10             (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
0346: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0348: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0349: 20       POP   X                  (0156)     pop     X
034A: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
034B: 09 00    ADC   A,0x0              (0158)     adc     A, 0
034D: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
034E: 08       PUSH  A                  (0160)     push    A
034F: 28       ROMX                     (0161)     romx                            ; load config data from the table
0350: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0351: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
0353: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
0355: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
0356: 20       POP   X                  (0166)     pop     X
0357: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0358: 09 00    ADC   A,0x0              (0168)     adc     A, 0
035A: 8F D7    JMP   0x0332             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
035C: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
035E: 70 3F    AND   F,0x3F             
0360: 71 C0    OR    F,0xC0             (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0362: 7F       RET                      (0173)     ret
(0174) 
(0175) AREA InterruptRAM(ram, rel)
(0176) 
(0177) NO_SHADOW:
(0178) _NO_SHADOW:
FILE: lib\i2chw_1int.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW_1INT.asm
                                        (0004) ;;   Version: 1.6, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW (Slave) Interrupt Service Routine.
                                        (0008) ;;  This is the interrupt seveice routine for the Slave I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "I2CHW_1Slave.inc"
                                        (0016) include "I2CHW_1Common.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export     I2CHW_1_RsrcStatus                                        ; upper (7x) bits write status, lower 3 bits read status
                                        (0023) export    _I2CHW_1_RsrcStatus                                        ; upper (7x) bits write status, lower 3 bits read status
                                        (0024) export     I2CHW_1_Read_Count
                                        (0025) export    _I2CHW_1_Read_Count
                                        (0026) export     I2CHW_1_Write_Count
                                        (0027) export    _I2CHW_1_Write_Count
                                        (0028) export    pI2CHW_1_Read_BufLO
                                        (0029) export   _pI2CHW_1_Read_BufLO
                                        (0030) export    pI2CHW_1_Write_BufLO
                                        (0031) export   _pI2CHW_1_Write_BufLO
                                        (0032) export   _I2CHW_1_bStatus
                                        (0033) export    I2CHW_1_bStatus
                                        (0034) 
                                        (0035) ;-----------------------------------------------
                                        (0036) ; WARNING: The variables below are deprecated
                                        (0037) ; and have been replaced with Read_BufLO
                                        (0038) ; and Write_BufLO
                                        (0039) ;-----------------------------------------------
                                        (0040) export    pI2CHW_1_Read_Buf
                                        (0041) export   _pI2CHW_1_Read_Buf
                                        (0042) export    pI2CHW_1_Write_Buf
                                        (0043) export   _pI2CHW_1_Write_Buf
                                        (0044) ;-----------------------------------------------
                                        (0045) ; END WARNING
                                        (0046) ;-----------------------------------------------
                                        (0047) 
                                        (0048) area InterruptRAM(RAM, REL, CON)	 
                                        (0049) 
                                        (0050) ;-----------------------------------------------
                                        (0051) ; Variable Allocation
                                        (0052) ;-----------------------------------------------
                                        (0053) 
                                        (0054)  _I2CHW_1_bStatus:
                                        (0055)   I2CHW_1_bStatus:                           blk 1
                                        (0056)   I2CHW_1_RsrcStatus:
                                        (0057)  _I2CHW_1_RsrcStatus:                        blk     1
                                        (0058)   I2CHW_1_Write_Count:
                                        (0059)  _I2CHW_1_Write_Count:                       blk    1
                                        (0060) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0061) export    pI2CHW_1_Write_BufHI
                                        (0062) export   _pI2CHW_1_Write_BufHI
                                        (0063) 
                                        (0064)  pI2CHW_1_Write_BufHI:
                                        (0065) _pI2CHW_1_Write_BufHI:                       blk     1
                                        (0066) ENDIF
                                        (0067) ;-----------------------------------------------
                                        (0068) ; WARNING: The variable below is deprecated
                                        (0069) ; and has been replaced Write_BufLO
                                        (0070) ;-----------------------------------------------
                                        (0071)  pI2CHW_1_Write_Buf:
                                        (0072) _pI2CHW_1_Write_Buf:
                                        (0073) ;-----------------------------------------------
                                        (0074) ; END WARNING
                                        (0075) ;-----------------------------------------------
                                        (0076)  pI2CHW_1_Write_BufLO:
                                        (0077) _pI2CHW_1_Write_BufLO:                       blk      1
                                        (0078) 
                                        (0079) IF I2CHW_1_READ_FLASH
                                        (0080) export    pI2CHW_1_Read_BufHI
                                        (0081) export   _pI2CHW_1_Read_BufHI
                                        (0082) 
                                        (0083)  pI2CHW_1_Read_BufHI:
                                        (0084) _pI2CHW_1_Read_BufHI:                        blk     1
                                        (0085) ELSE
                                        (0086) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0087) export    pI2CHW_1_Read_BufHI
                                        (0088) export   _pI2CHW_1_Read_BufHI
                                        (0089) 
                                        (0090)  pI2CHW_1_Read_BufHI:
                                        (0091) _pI2CHW_1_Read_BufHI:                        blk     1
                                        (0092) ENDIF
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ;-----------------------------------------------
                                        (0096) ; WARNING: The variable below is deprecated
                                        (0097) ; and has been replaced Read_BufLO
                                        (0098) ;-----------------------------------------------
                                        (0099)  pI2CHW_1_Read_Buf:
                                        (0100) _pI2CHW_1_Read_Buf:
                                        (0101) ;-----------------------------------------------
                                        (0102) ; END WARNING
                                        (0103) ;-----------------------------------------------
                                        (0104)  pI2CHW_1_Read_BufLO:
                                        (0105) _pI2CHW_1_Read_BufLO:                        blk       1
                                        (0106) 
                                        (0107) IF I2CHW_1_READ_FLASH
                                        (0108) export    I2CHW_1_Read_CountHI
                                        (0109) export   _I2CHW_1_Read_CountHI
                                        (0110) 
                                        (0111)  I2CHW_1_Read_CountHI:
                                        (0112) _I2CHW_1_Read_CountHI:                       blk    1
                                        (0113) ENDIF
                                        (0114) 
                                        (0115)  I2CHW_1_Read_Count:
                                        (0116) _I2CHW_1_Read_Count:                         blk      1
                                        (0117) 
                                        (0118) 
                                        (0119) IF I2CHW_1_POLLED_PROCESS
                                        (0120) 
                                        (0121) I2CHW_1_Poll_Status:                             blk      1  ;internal variable used for polled operation
                                        (0122) ;bit 0 - Write transaction started begin looking for the STOP state to terminate the transaction
                                        (0123) I2C_WRITE_STARTED:       equ     0x01
                                        (0124) ;bit 1 - Undefined
                                        (0125) ;bit 2 - Undefined
                                        (0126) ;bit 3 - Undefined
                                        (0127) ;bit 4 - Undefined
                                        (0128) ;bit 5 - Undefined
                                        (0129) ;bit 6 - Undefined
                                        (0130) ;bit 7 - Undefined
                                        (0131) 
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 
                                        (0135) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0136) ;---------------------------------------------------
                                        (0137) ; Insert your custom declarations below this banner
                                        (0138) ;---------------------------------------------------
                                        (0139) 
                                        (0140) ;------------------------
                                        (0141) ; Includes
                                        (0142) ;------------------------
                                        (0143) 
                                        (0144) 	
                                        (0145) ;------------------------
                                        (0146) ;  Constant Definitions
                                        (0147) ;------------------------
                                        (0148) 
                                        (0149) 
                                        (0150) ;------------------------
                                        (0151) ; Variable Allocation
                                        (0152) ;------------------------
                                        (0153) 
                                        (0154) 
                                        (0155) ;---------------------------------------------------
                                        (0156) ; Insert your custom declarations above this banner
                                        (0157) ;---------------------------------------------------
                                        (0158) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0159) 
                                        (0160) 
                                        (0161) 
                                        (0162) 
                                        (0163) AREA UserModules (ROM, REL)
                                        (0164) 
                                        (0165) export _I2CHW_1_ISR
                                        (0166) export _I2CHW_1_Poll
                                        (0167) export  I2CHW_1_Poll
                                        (0168) 
                                        (0169) ;;****************************************************
                                        (0170) ;; I2C_ISR  main entry point from vector 60h
                                        (0171) ;;
                                        (0172) ;;****************************************************
                                        (0173) 
                                        (0174) IF I2CHW_1_POLLED_PROCESS
                                        (0175) 
                                        (0176) _I2CHW_1_ISR:
                                        (0177)     reti ; stub out the ISR if this is going to be a polled function
                                        (0178) 
                                        (0179)  
                                        (0180)  
                                        (0181)  I2CHW_1_Poll:
                                        (0182) _I2CHW_1_Poll:
                                        (0183) ;    cases are:
                                        (0184) ;    1. Stop state after a Master write to this slave
                                        (0185) ;    2. possible Stop condition COMBINED with a new transaction is not a problem since the Stop will only flag that the 
                                        (0186) ;       previous write has been completed. (so just call the I2CA_Process routine for this case and let the process routine take
                                        (0187) ;       care of it.
                                        (0188)     ;case 1
                                        (0189)     RAM_SETPAGE_CUR	( >I2CHW_1_Poll_Status )
                                        (0190) 
                                        (0191)     tst [I2CHW_1_Poll_Status], I2C_WRITE_STARTED
                                        (0192)     jz  NOT_I2C_Write
                                        (0193)     tst reg[ I2CHW_1_SCR], I2C_STOP_ST
                                        (0194)     jz  NOT_I2C_Write
                                        (0195)     ;make sure the pushes and pops 'line up' or die horribly
                                        (0196)     push A
                                        (0197)     push X
                                        (0198) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0199)     REG_PRESERVE IDX_PP
                                        (0200) ENDIF
                                        (0201)     jmp STOPTRAP
                                        (0202)     
                                        (0203) NOT_I2C_Write:    
                                        (0204)     tst reg[ I2CHW_1_SCR], I2C_BYTE_COMPL
                                        (0205)     jnz  I2CHW_1_Process   ;if no other critical eventa are in evidence, process an I2C byte if it's done
                                        (0206)     ret
                                        (0207) 
                                        (0208)  I2CHW_1_Process:
                                        (0209) _I2CHW_1_Process:  ;don't need to export user will call I2CA_POLL which will call the I2CA_Process routine if necessary
                                        (0210) 
                                        (0211) 
                                        (0212) 
                                        (0213) ELSE
                                        (0214) ;; STUB for polling function when it's un-defined
                                        (0215)  I2CHW_1_Poll:
                                        (0216) _I2CHW_1_Poll:
0363: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) 
                                        (0220) ;;*****************************************************************************************
                                        (0221) ;;                 I2C_MASTER  main entry point from vector 60h
                                        (0222) ;;*****************************************************************************************
                                        (0223) 
                                        (0224) _I2CHW_1_ISR:
                                        (0225) ENDIF
0364: 08       PUSH  A                  (0226)     push A
0365: 10       PUSH  X                  (0227)     push X
                                        (0228) 
                                        (0229) IF SYSTEM_LARGE_MEMORY_MODEL
0366: 5D D3    MOV   A,REG[0xD3]        
0368: 08       PUSH  A                  (0230)     REG_PRESERVE IDX_PP
                                        (0231) ENDIF
                                        (0232) 
                                        (0233) Process_REENTRY:
                                        (0234) 
                                        (0235) ;******************************************************************************************
                                        (0236) ;Before doing anything else check for the presence of a STOP_ST in combination with the
                                        (0237) ;STOP Interrupt Enable (STOPIE).  If this is what happened set appropriate bits, 
                                        (0238) ;clear and reset the main I2CHW interrupt to assure that we haven't missed a BYTE_COMPLETE
                                        (0239) ;interrupt and exit the interrupt.  If a BYTE_COMPLETE interrupt is concurrent with the STOP 
                                        (0240) ;interrupt the next entry to this interrupt will be immediate and the STOPIE bit will now be 
                                        (0241) ;cleared.  This removes the possibility of trying to process two different events within one 
                                        (0242) ;interrupt.
                                        (0243) ;          
                                        (0244) ;******************************************************************************************
                                        (0245) ; Check the Stop Bit in SCR only if the Stop Interrupt is enabled.    
                                        (0246)     IF(I2CHW_1_USED_I2C_BLOCK)
                                        (0247)     M8C_SetBank1
                                        (0248)     tst reg[I2CHW_1_CFG],I2C_STOPIE
                                        (0249)     M8C_SetBank0
                                        (0250)     ELSE
0369: 49 D6 10 TST   REG[0xD6],0x10     (0251)     tst reg[I2CHW_1_CFG],I2C_STOPIE
                                        (0252)     ENDIF
036C: A0 06    JZ    0x0373             (0253)     jz  ByteComplProcess
036E: 49 D7 20 TST   REG[0xD7],0x20     (0254)     tst reg[I2CHW_1_SCR],I2C_STOP_ST                         ; Test if the Interrupt is due to Stop Condition
                                        (0255) ;conditions that must be met here are Slave-enabled, STOP int enabled (STOPIE), and STOP_ST (status bit set)
0371: B0 EB    JNZ   0x045D             (0256)     jnz STOPTRAP                                       ; If yes process Stop Trap
                                        (0257) 
                                        (0258) ByteComplProcess:
                                        (0259) ;*********END TEST OF STOP STATUS**********************************************************       
                                        (0260) 
                                        (0261) ;       file stored in Slave directory of user module
                                        (0262) ;program flow would likely be to first determine what 'mode' the device is in.  I.e. is Master and Slave mode enabled?
                                        (0263) ; control of program flow must take more into account when all more modes are enabled.
                                        (0264) ;
                                        (0265) ;* Slave only
                                        (0266)     ;very first thing to test is the I2C_ADDRIN bit.  If set then we are getting an address after a START
0373: 49 D7 08 TST   REG[0xD7],0x8      (0267)     tst reg[I2CHW_1_SCR], I2C_ADDRIN
0376: B0 74    JNZ   0x03EB             (0268)     jnz I2C_EvaluateADDRIN
                                        (0269) 
                                        (0270)     ; if slave didn't recieve an address, then this must be data for it to deal with
0378: 49 D7 04 TST   REG[0xD7],0x4      (0271)     tst reg[I2CHW_1_SCR], I2C_TX  ;if set we are transmitting => this is at end of byte to eval the ACK
037B: B0 BE    JNZ   0x043A             (0272)     jnz I2C_EvaluateACKIN
                                        (0273)     ; if slave NOT transmitting and NOT an address then data is being recieved
                                        (0274)     ; ack it and process it.
                                        (0275) 
                                        (0276)     ;UNLESS the stop bit turns out to have been set...
037D: 49 D7 20 TST   REG[0xD7],0x20     (0277)     tst reg[I2CHW_1_SCR], I2C_STOP_ST
0380: B0 DC    JNZ   0x045D             (0278)     jnz STOPTRAP
                                        (0279)     ; if slave NOT transmitting and NOT an address and Master is NOT terminating the then data is being recieved
                                        (0280)     ; ack it and process it.
                                        (0281) 
                                        (0282) ;;code snipped from old SW I2C below
                                        (0283) ;
                                        (0284) ; MASTER WRITE to SLAVE
                                        (0285) ;
                                        (0286) ;@PSoC_UserCode_BODY1@ (Do not change this line.)
                                        (0287) ;---------------------------------------------------
                                        (0288) ; Insert your custom code below this banner
                                        (0289) ;---------------------------------------------------
                                        (0290) ; By modifying the section from here down to the next comment block
                                        (0291) ; a user could process data for a custom I2C WRITE application
                                        (0292) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0293) ;********************************************************
0382: 47 00 04 TST   [0x0],0x4          (0294)    tst   [I2CHW_1_bStatus], fI2C_NAKnextWr
0385: B0 14    JNZ   0x039A             (0295)    jnz   WrStoreData
                                        (0296)    ;
                                        (0297)    ;process write data here
                                        (0298)    ;
0387: 7A 02    DEC   [0x2]              (0299)    dec   [I2CHW_1_Write_Count]
0389: C0 39    JC    0x03C3             (0300)    jc    I2CHW_1_WriteOverflow                                       ; carry set if value became -1
                                        (0301)    ;jz    WrStoreData
038B: 3C 02 00 CMP   [0x2],0x0          (0302)    cmp   [I2CHW_1_Write_Count], 00                                   ;set nak flag, dec count, and store data
038E: A0 03    JZ    0x0392             (0303)    jz    WrNakNextByte
0390: 80 06    JMP   0x0397             (0304)    jmp   WrNotBufEnd
                                        (0305) WrNakNextByte:                                                       ;set the nakflag in I2CHW_1_bStatus
0392: 2E 00 04 OR    [0x0],0x4          (0306)    or    [I2CHW_1_bStatus], fI2C_NAKnextWr
0395: 80 04    JMP   0x039A             (0307)    jmp   WrStoreData
                                        (0308) WrNotBufEnd:
0397: 26 00 FB AND   [0x0],0xFB         (0309)    and   [I2CHW_1_bStatus], ~fI2C_NAKnextWr                          ;clear the nak flag in case it was set from a previous operation
                                        (0310) WrStoreData:
                                        (0311)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
039A: 2E 01 10 OR    [0x1],0x10         (0312)    or    [I2CHW_1_RsrcStatus], I2CHW_WR_NOERR                        ;set current status
                                        (0313) IF SYSTEM_LARGE_MEMORY_MODEL
039D: 51 03    MOV   A,[0x3]            (0314)    mov   A, [pI2CHW_1_Write_BufHI]
                                        (0315) ENDIF
039F: 60 D3    MOV   REG[0xD3],A        (0316)    RAM_SETPAGE_IDX A
03A1: 58 04    MOV   X,[0x4]            (0317)    mov   X, [pI2CHW_1_Write_BufLO]
03A3: 5D D8    MOV   A,REG[0xD8]        (0318)    mov   A, reg[I2CHW_1_DR]
03A5: 70 3F    AND   F,0x3F             
03A7: 71 80    OR    F,0x80             (0319)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
03A9: 54 00    MOV   [X+0],A            (0320)    mov   [X], A
03AB: 70 3F    AND   F,0x3F             
03AD: 71 00    OR    F,0x0              (0321)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
03AF: 76 04    INC   [0x4]              (0322)    inc   [pI2CHW_1_Write_BufLO]
                                        (0323) 
03B1: 47 00 04 TST   [0x0],0x4          (0324)    tst   [I2CHW_1_bStatus], fI2C_NAKnextWr
03B4: B0 16    JNZ   0x03CB             (0325)    jnz   NAK_this_one
                                        (0326) 
                                        (0327) 
                                        (0328) ;---------------------------------------------------
                                        (0329) ; End user I2C WRITE Customization
                                        (0330) ; Insert your custom code above this banner
                                        (0331) ;---------------------------------------------------
                                        (0332) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0333) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0334) 
                                        (0335) ;
                                        (0336) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0337) ;
03B6: 62 D7 10 MOV   REG[0xD7],0x10     (0338)     SetI2CHW_1_SCR  (I2C_ACKOUT )
                                        (0339) 
                                        (0340) 
                                        (0341) IF SYSTEM_LARGE_MEMORY_MODEL
03B9: 18       POP   A                  
03BA: 60 D3    MOV   REG[0xD3],A        (0342)     REG_RESTORE IDX_PP
                                        (0343) ENDIF
03BC: 20       POP   X                  (0344)     pop X
03BD: 18       POP   A                  (0345)     pop A
03BE: 70 3F    AND   F,0x3F             
03C0: 71 C0    OR    F,0xC0             (0346)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
03C2: 7E       RETI                     (0347)     I2CHW_1_SERVICE_RETURN
                                        (0348) 
                                        (0349) 
                                        (0350) ;
                                        (0351) ;ram-write-overflow label here, just rewrite the last location in the buffer
                                        (0352) ;    and set the overflow flag
                                        (0353) ;
                                        (0354) I2CHW_1_WriteOverflow:
03C3: 2E 01 20 OR    [0x1],0x20         (0355)    or    [I2CHW_1_RsrcStatus], I2CHW_WR_OVERFLOW                     ; flag the overflow
03C6: 26 01 EF AND   [0x1],0xEF         (0356)    and   [I2CHW_1_RsrcStatus], ~I2CHW_WR_NOERR
03C9: 76 02    INC   [0x2]              (0357)    inc   [I2CHW_1_Write_Count]                                       ; put it back to zero
                                        (0358)    ;If data is to be Nak'ed
                                        (0359) NAK_this_one:
03CB: 26 00 FB AND   [0x0],0xFB         (0360)    and   [I2CHW_1_bStatus], ~fI2C_NAKnextWr                          ;clear the nak flag in case it was set from a previous operation
                                        (0361) 
                                        (0362) ;
                                        (0363) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0364) ;
03CE: 62 D7 00 MOV   REG[0xD7],0x0      (0365)     SetI2CHW_1_SCR ( 0 )
                                        (0366) 
                                        (0367) 
                                        (0368) IF SYSTEM_LARGE_MEMORY_MODEL
03D1: 18       POP   A                  
03D2: 60 D3    MOV   REG[0xD3],A        (0369)     REG_RESTORE IDX_PP
                                        (0370) ENDIF
03D4: 20       POP   X                  (0371)     pop X
03D5: 18       POP   A                  (0372)     pop A
03D6: 70 3F    AND   F,0x3F             
03D8: 71 C0    OR    F,0xC0             (0373)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
03DA: 7E       RETI                     (0374)     I2CHW_1_SERVICE_RETURN                                                              ;return and wait for the next interrupt (on data)
                                        (0375) 
                                        (0376) 
                                        (0377) ;********************************************************
                                        (0378) ; Treat the case where the Slave will be continuing to
                                        (0379) ; receive data after receiving the address
                                        (0380) ;********************************************************
                                        (0381) I2C_AckAddr_RXdata:
                                        (0382) IF I2CHW_1_POLLED_PROCESS
                                        (0383)     or [I2CHW_1_Poll_Status], I2C_WRITE_STARTED
                                        (0384) ELSE
03DB: 43 D6 10 OR    REG[0xD6],0x10     (0385)     BitSetI2CHW_1_CFG ( I2C_STOPIE )
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) ;
                                        (0389) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0390) ;
03DE: 62 D7 10 MOV   REG[0xD7],0x10     (0391)     SetI2CHW_1_SCR ( I2C_ACKOUT )
                                        (0392) 
                                        (0393) 
                                        (0394) IF SYSTEM_LARGE_MEMORY_MODEL
03E1: 18       POP   A                  
03E2: 60 D3    MOV   REG[0xD3],A        (0395)     REG_RESTORE IDX_PP
                                        (0396) ENDIF
03E4: 20       POP   X                  (0397)     pop X
03E5: 18       POP   A                  (0398)     pop A
03E6: 70 3F    AND   F,0x3F             
03E8: 71 C0    OR    F,0xC0             (0399)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
03EA: 7E       RETI                     (0400)     I2CHW_1_SERVICE_RETURN
                                        (0401) 
                                        (0402) ;********************************************************
                                        (0403) ; Look to see if the address is us or someone else
                                        (0404) ; use the carry flag to idendify a READ or WRITE address
                                        (0405) ;********************************************************
                                        (0406) I2C_EvaluateADDRIN:
03EB: 51 01    MOV   A,[0x1]            (0407)     mov A, [I2CHW_1_RsrcStatus]
03ED: 21 30    AND   A,0x30             (0408)     and A, (I2CHW_WR_NOERR | I2CHW_WR_OVERFLOW)
03EF: A0 07    JZ    0x03F7             (0409)     jz  NewADDRNotSet                                                                                             ;set new addr only if previous data appears to be in buffer
03F1: 2E 01 40 OR    [0x1],0x40         (0410)     or  [I2CHW_1_RsrcStatus], I2CHW_WR_COMPLETE                      ;Same bit as I2CHW_ISR_NEW_ADDR
                                        (0411) 
                                        (0412) IF I2CHW_1_POLLED_PROCESS						                              ;if a new addr was received it's OK to terminate stop detection
                                        (0413)     and [I2CHW_1_Poll_Status], ~I2C_WRITE_STARTED            ;used to determine the end of a Master write to a slave.
                                        (0414) ELSE			
03F4: 41 D6 EF AND   REG[0xD6],0xEF     (0415)     BitClrI2CHW_1_CFG I2C_STOPIE
                                        (0416) ENDIF
                                        (0417)                                                                                                                                           ;SET WR_COMPL bit if it appears there was write taking place just previous
                                        (0418) NewADDRNotSet:                                                       ;may use as a way to tag the end of a master write to slave
                                        (0419) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0420) ;---------------------------------------------------
                                        (0421) ; Insert your custom code below this banner
                                        (0422) ;---------------------------------------------------
                                        (0423) ; By replacing the section from here down to the next block
                                        (0424) ; a user could process I2C addresses differently
                                        (0425) ;********************************************************
                                        (0426)                                                                                                                                           ;to this new address by looking at the status bits
                                        (0427)     ;inc [rec_cnt]
03F7: 5D D8    MOV   A,REG[0xD8]        (0428)     mov A, reg[I2CHW_1_DR]
03F9: 70 F9    AND   F,0xF9             (0429)     and F, 0xF9                                                      ;clear Carry (C) AND Zero (Z) in Flag reg
03FB: 6D       RRC   A                  (0430)     rrc A                                                            ;carry now holds bit 0 (r/~w) from addr byte
                                        (0431) IF (I2CHW_1_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                        (0432)                                           ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
03FC: 31 00    XOR   A,0x0              (0433)     xor A,  I2CHW_1_SLAVE_ADDR                                       ;for an equate
03FE: B0 4E    JNZ   0x044D             (0434)     jnz I2C_Terminate
                                        (0435) ENDIF
0400: 2E 01 80 OR    [0x1],0x80         (0436)     or [I2CHW_1_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0437) 
                                        (0438) ;********************************************************
                                        (0439) ; User could modify this section to allow the I2C routine
                                        (0440) ; to respond to multiple addresses, ram addresses, i/o pin
                                        (0441) ; based addresses, etc.
                                        (0442) ;********************************************************
                                        (0443) ;---------------------------------------------------
                                        (0444) ; End user I2C ADDR Compare Customization
                                        (0445) ; Insert your custom code above this banner
                                        (0446) ;---------------------------------------------------
                                        (0447) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0448) 
                                        (0449) I2CHW_1_send_ack:                                                    ;slave send adress ack
                                        (0450) 
                                        (0451) 
                                        (0452)     ;OK so the addreses were the same was it a read (c=1) or a write (c=0)
0403: DF D7    JNC   0x03DB             (0453)     jnc I2C_AckAddr_RXdata ;(Master Write/Slave Receive) for this case we receive data and ack it
                                        (0454) 
                                        (0455) ;********************************************************
                                        (0456) ;Master Read (Master Read/Slave Transmit) Ack the address too.
                                        (0457) ;for this case the master has just sent us OUR read address which must be Ack'ed and will
                                        (0458) ;subsequently be reading from us (which the master will Ack.  So for the first bit we must
                                        (0459) ; set the I2C_TX AND the ACK bits in the I2C_SCR (first byte only)
                                        (0460) ; THEN we'll just be reading the ACK from the master as it reads our data
                                        (0461) ;********************************************************
                                        (0462) 
0405: 26 01 FB AND   [0x1],0xFB         (0463)     and [I2CHW_1_RsrcStatus], ~I2CHW_RD_COMPLETE                     ;Master will NAK us at the end of transaction
                                        (0464) 
0408: 50 14    MOV   A,0x14             (0465)     mov A, (I2C_ACKOUT | I2C_TX)
040A: 08       PUSH  A                  (0466)     push A
                                        (0467) 
                                        (0468) 
                                        (0469) ;
                                        (0470) ;MASTER is READING FROM SLAVE (ram or flash buffer)
                                        (0471) ;
                                        (0472) ;;code snipped from old SW I2C below
                                        (0473) 
                                        (0474) I2C_ObtainReadData:
                                        (0475) 
                                        (0476) ;********************************************************
                                        (0477) ; here we need to get the next data to output (master-read)
                                        (0478) ; also set the status byte for use on exit
                                        (0479) ;********************************************************
                                        (0480) IF I2CHW_1_READ_FLASH
                                        (0481) ;@PSoC_UserCode_BODY2@ (Do not change this line.)
                                        (0482) ;---------------------------------------------------
                                        (0483) ; Insert your custom code below this banner
                                        (0484) ; User flash read customization could take place within
                                        (0485) ; this area
                                        (0486) ;---------------------------------------------------
                                        (0487)     tst  [I2CHW_1_RsrcStatus],I2CHW_READFLASH
                                        (0488)     jz   ReadRamData
                                        (0489) 
                                        (0490)     ;
                                        (0491)     ;get the data
                                        (0492)     ;
                                        (0493)     mov  X, [pI2CHW_1_Read_BufLO]
                                        (0494)     mov  A, [pI2CHW_1_Read_BufHI]
                                        (0495)     romx
                                        (0496)     mov  reg[I2CHW_1_DR],A
                                        (0497)     dec  [I2CHW_1_Read_Count]                                        ;calc addr lsb
                                        (0498)     jnc  NoDecHighCount
                                        (0499)     dec  [I2CHW_1_Read_CountHI]
                                        (0500)     jc   FlashRdOverflow
                                        (0501) 
                                        (0502) NoDecHighCount:
                                        (0503) 
                                        (0504)     inc  [pI2CHW_1_Read_BufLO]                                       ;set the next flash address to read
                                        (0505)     jnc  NoIncHiAddr
                                        (0506)     inc  [pI2CHW_1_Read_BufHI]
                                        (0507) NoIncHiAddr:
                                        (0508)    jmp   I2CNormalRead
                                        (0509) 
                                        (0510) FlashRdOverflow:
                                        (0511)     ;deal with the over flow cond by resending last data byte (dec the low order addr byte)
                                        (0512) 
                                        (0513)    or    [I2CHW_1_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0514)    and   [I2CHW_1_RsrcStatus], ~I2CHW_RD_NOERR
                                        (0515)    ;set count back to 0
                                        (0516)    mov   [I2CHW_1_Read_CountHI], 0                                   ;functionally the same as incrementing ffff and less instructions
                                        (0517)    mov   [I2CHW_1_Read_Count], 0
                                        (0518)    jmp   I2CNormalRead
                                        (0519) ;---------------------------------------------------
                                        (0520) ; Insert your custom code above this banner
                                        (0521) ; END User flash read customization
                                        (0522) ;---------------------------------------------------
                                        (0523) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0524) ENDIF
                                        (0525) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0526) ;---------------------------------------------------
                                        (0527) ; Insert your custom code below this banner
                                        (0528) ;---------------------------------------------------
                                        (0529) ; By replacing the section from here down to the next block
                                        (0530) ; a user could process data for a custom I2C READ application
                                        (0531) ;********************************************************
                                        (0532) ReadRamData:
                                        (0533)    ;read the current data byte
                                        (0534) IF SYSTEM_LARGE_MEMORY_MODEL
040B: 51 05    MOV   A,[0x5]            (0535)    mov   A, [pI2CHW_1_Read_BufHI]
                                        (0536) ENDIF
040D: 60 D3    MOV   REG[0xD3],A        (0537)    RAM_SETPAGE_IDX A
040F: 58 06    MOV   X,[0x6]            (0538)    mov   X, [pI2CHW_1_Read_BufLO]
0411: 70 3F    AND   F,0x3F             
0413: 71 80    OR    F,0x80             (0539)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0415: 52 00    MOV   A,[X+0]            (0540)    mov   A, [X]
0417: 70 3F    AND   F,0x3F             
0419: 71 00    OR    F,0x0              (0541)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
041B: 60 D8    MOV   REG[0xD8],A        (0542)    mov   reg[I2CHW_1_DR], A
041D: 7A 07    DEC   [0x7]              (0543)    dec   [I2CHW_1_Read_Count]
041F: C0 05    JC    0x0425             (0544)    jc    I2CHW_1_readOverflow
0421: 76 06    INC   [0x6]              (0545)    inc   [pI2CHW_1_Read_BufLO]
0423: 80 09    JMP   0x042D             (0546)    jmp   I2CNormalRead
                                        (0547) ;
                                        (0548) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0549) ;
                                        (0550) I2CHW_1_readOverflow:
0425: 2E 01 02 OR    [0x1],0x2          (0551)    or    [I2CHW_1_RsrcStatus], I2CHW_RD_OVERFLOW
0428: 26 01 FE AND   [0x1],0xFE         (0552)    and   [I2CHW_1_RsrcStatus], ~I2CHW_RD_NOERR
042B: 76 07    INC   [0x7]              (0553)    inc   [I2CHW_1_Read_Count]                                        ; set back to zero
                                        (0554) 
                                        (0555) ;********************************************************
                                        (0556) ; End user I2C READ customization section
                                        (0557) ;********************************************************
                                        (0558) ; Insert your custom code above this banner
                                        (0559) ;---------------------------------------------------
                                        (0560) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0561) 
                                        (0562) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0563) I2CNormalRead:
                                        (0564) 
                                        (0565)         ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0566)         ;and place there based on whether or not the previous transmission was our I2C address.
042D: 18       POP   A                  (0567)         pop A
                                        (0568) 
                                        (0569) ;
                                        (0570) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0571) ;
042E: 60 D7    MOV   REG[0xD7],A        (0572)     SetI2CHW_1_SCR A     ;set read bit as (bit0) and Addr bit (bit7)in the I2C_SCR
                                        (0573) 
                                        (0574) 
                                        (0575) IF SYSTEM_LARGE_MEMORY_MODEL
0430: 18       POP   A                  
0431: 60 D3    MOV   REG[0xD3],A        (0576)     REG_RESTORE IDX_PP
                                        (0577) ENDIF
0433: 20       POP   X                  (0578)     pop X
0434: 18       POP   A                  (0579)     pop A
0435: 70 3F    AND   F,0x3F             
0437: 71 C0    OR    F,0xC0             (0580)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
0439: 7E       RETI                     (0581)     I2CHW_1_SERVICE_RETURN ;return and wait for the next interrupt (on data)
                                        (0582) 
                                        (0583) 
                                        (0584) 
                                        (0585) I2C_EvaluateACKIN:
                                        (0586) 
043A: 49 D7 02 TST   REG[0xD7],0x2      (0587)     tst reg[I2CHW_1_SCR], I2C_LST_BIT
043D: B0 06    JNZ   0x0444             (0588)     jnz I2C_LastByteToMstr  ;NAK recd on TX so this is the end set mode to interrup only on ADDR IN
                                        (0589)     ; got here we were ACK'ed so send another byte
043F: 50 04    MOV   A,0x4              (0590)     mov A, ( I2C_TX )
                                        (0591)         ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0592)         ;and place there based on whether or not the previous transmission was our I2C address.
0441: 08       PUSH  A                  (0593)         push A
0442: 8F C8    JMP   0x040B             (0594)         jmp I2C_ObtainReadData
                                        (0595) 
                                        (0596) 
                                        (0597) I2C_LastByteToMstr:
0444: 2E 01 01 OR    [0x1],0x1          (0598)     or  [I2CHW_1_RsrcStatus], I2CHW_RD_NOERR                         ;Master NAK'ed us at the end of transaction
0447: 2E 01 04 OR    [0x1],0x4          (0599)     or  [I2CHW_1_RsrcStatus], I2CHW_RD_COMPLETE
044A: 26 01 7F AND   [0x1],0x7F         (0600)     and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                        (0601) 
                                        (0602) I2C_Terminate:
044D: 26 01 7F AND   [0x1],0x7F         (0603)     and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                        (0604) 
                                        (0605) ;
                                        (0606) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0607) ;
0450: 62 D7 00 MOV   REG[0xD7],0x0      (0608)     SetI2CHW_1_SCR 0     ;the default mode to wait for an address
                                        (0609) 
                                        (0610) 
                                        (0611) IF SYSTEM_LARGE_MEMORY_MODEL
0453: 18       POP   A                  
0454: 60 D3    MOV   REG[0xD3],A        (0612)     REG_RESTORE IDX_PP
                                        (0613) ENDIF
0456: 20       POP   X                  (0614)     pop X
0457: 18       POP   A                  (0615)     pop A
0458: 70 3F    AND   F,0x3F             
045A: 71 C0    OR    F,0xC0             (0616)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
045C: 7E       RETI                     (0617)     I2CHW_1_SERVICE_RETURN
                                        (0618) 
                                        (0619) STOPTRAP:
                                        (0620)     ;I2C stop detected
                                        (0621) ;@PSoC_UserCode_BODY6@ (Do not change this line.)
                                        (0622) ;---------------------------------------------------
                                        (0623) ; Insert your custom code below this banner
                                        (0624) ; by modifying the block of code here a user could address key operational considerations
                                        (0625) ; at the point that a termination of a write command is detected.
                                        (0626) ; stop interrupt is automatically enabled on write so that the end of the write can be determined.
                                        (0627) ; stop interrupt is not enabled when a read transaction occurs
                                        (0628) ;---------------------------------------------------
                                        (0629) ;
                                        (0630) ; set a flag to indicate END OF TRANSMISSION
                                        (0631) ;
045D: 2E 01 40 OR    [0x1],0x40         (0632)     or  [I2CHW_1_RsrcStatus], I2CHW_WR_COMPLETE                      ;only SET by ISR USER must clear.
0460: 26 01 7F AND   [0x1],0x7F         (0633)     and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                        (0634) 
                                        (0635) IF I2CHW_1_POLLED_PROCESS
                                        (0636)     and [I2CHW_1_Poll_Status], ~I2C_WRITE_STARTED
                                        (0637)     jmp ExitISR
                                        (0638) ELSE
0463: 41 D6 EF AND   REG[0xD6],0xEF     (0639)     BitClrI2CHW_1_CFG I2C_STOPIE
0466: 49 D7 01 TST   REG[0xD7],0x1      (0640)     tst reg[I2CHW_1_SCR], I2C_BYTE_COMPL
                                        (0641) ;;if BYTE_COMPL is set, there's an excellent chance to lose an ISR.  Because of the way they are
                                        (0642) ;; latched into the INT_MSK.  Therefore clear the applicable bit (STOPIE) and jump directly to the 
                                        (0643) ;; top of this routing since the bus is currently stalled.  Just in case the ISR is properly latched,
                                        (0644) ;; clear the mask bit since it's is serviced manually.
0469: A0 06    JZ    0x0470             (0645)     jz ExitISR
046B: 41 DD FE AND   REG[0xDD],0xFE     (0646)     and  reg[INT_CLR3], ~0x01                                ;clear the I2C interrupt
                                        (0647) ENDIF
                                        (0648) 
046E: 8E FA    JMP   0x0369             (0649) 	jmp Process_REENTRY
                                        (0650) 
                                        (0651) ExitISR:
                                        (0652) 
                                        (0653) IF SYSTEM_LARGE_MEMORY_MODEL
0470: 18       POP   A                  
0471: 60 D3    MOV   REG[0xD3],A        (0654)     REG_RESTORE IDX_PP
                                        (0655) ENDIF
0473: 20       POP   X                  (0656)     pop X
0474: 18       POP   A                  (0657)     pop A
0475: 70 3F    AND   F,0x3F             
0477: 71 C0    OR    F,0xC0             (0658)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
0479: 7E       RETI                     (0659)     I2CHW_1_SERVICE_RETURN
(0660) 
(0661) ;---------------------------------------------------
(0662) ; End user boot loader entry Customization
(0663) ; Insert your custom code above this banner
(0664) ;---------------------------------------------------
(0665) ;@PSoC_UserCode_END@ (Do not change this line.)
(0666) 
(0667) ; end of file I2CHW_1INT.asm
FILE: C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_SL~1\I2C_SL~1\I2C_SL~1\main.c
(0001) // I2C-UART slave
(0002) // CY8C29466-24PXI(DIP Package)
(0003) // PSoC Designer 5.0 + SP6
(0004) // IMAGECRAFT C Compiler
(0005) 
(0006) #include <m8c.h>        // part specific constants and macros
(0007) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0008) #define _BV(BIT) (1<<BIT)
(0009) #define sbi(BYTE,BIT) (BYTE |= _BV(BIT))
(0010) #define cbi(BYTE,BIT) (BYTE &= ~_BV(BIT))
(0011) #define LED_ON() sbi(PRT2DR, 0)
(0012) #define LED_OFF() cbi(PRT2DR, 0)
(0013) 
(0014) void main(void)
_main|__text_start|_main:
    047A: 71 01    OR    F,0x1
(0015) {
(0016)     M8C_EnableGInt;
(0017)     LED_ON();
    047C: 43 08 01 OR    REG[0x8],0x1
(0018) 
(0019)     while(1){
(0020)         
(0021)     }
    047F: 8F FF    JMP   0x047F
(0022) }
FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.02.004
