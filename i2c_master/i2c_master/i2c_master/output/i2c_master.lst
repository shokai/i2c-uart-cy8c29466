FILE: .\boot.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.18
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0002: 30       HALT                     
0003: 30       HALT                     
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0005: 30       HALT                     
0006: 30       HALT                     
0007: 30       HALT                     
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
0009: 30       HALT                     
000A: 30       HALT                     
000B: 30       HALT                     
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
000D: 30       HALT                     
000E: 30       HALT                     
000F: 30       HALT                     
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0011: 30       HALT                     
0012: 30       HALT                     
0013: 30       HALT                     
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0015: 30       HALT                     
0016: 30       HALT                     
0017: 30       HALT                     
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
0019: 30       HALT                     
001A: 30       HALT                     
001B: 30       HALT                     
001C: 7D 07 AF LJMP  PSoC_GPIO_ISR      (0141)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0145)     // call	void_handler
0020: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0021: 30       HALT                     
0022: 30       HALT                     
0023: 30       HALT                     
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0025: 30       HALT                     
0026: 30       HALT                     
0027: 30       HALT                     
0028: 7D 03 99 LJMP  0x0399             (0153)     ljmp	_UART_1_TX_ISR
002B: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 9D LJMP  0x039D             (0157)     ljmp	_UART_1_RX_ISR
002F: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0031: 30       HALT                     
0032: 30       HALT                     
0033: 30       HALT                     
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0035: 30       HALT                     
0036: 30       HALT                     
0037: 30       HALT                     
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
0039: 30       HALT                     
003A: 30       HALT                     
003B: 30       HALT                     
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
003D: 30       HALT                     
003E: 30       HALT                     
003F: 30       HALT                     
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0041: 30       HALT                     
0042: 30       HALT                     
0043: 30       HALT                     
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0045: 30       HALT                     
0046: 30       HALT                     
0047: 30       HALT                     
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
0049: 30       HALT                     
004A: 30       HALT                     
004B: 30       HALT                     
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
004D: 30       HALT                     
004E: 30       HALT                     
004F: 30       HALT                     
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0051: 30       HALT                     
0052: 30       HALT                     
0053: 30       HALT                     
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0055: 30       HALT                     
0056: 30       HALT                     
0057: 30       HALT                     
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
0059: 30       HALT                     
005A: 30       HALT                     
005B: 30       HALT                     
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
005D: 30       HALT                     
005E: 30       HALT                     
005F: 30       HALT                     
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0061: 30       HALT                     
0062: 30       HALT                     
0063: 30       HALT                     
0064: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
0065: 30       HALT                     
0066: 30       HALT                     
0067: 30       HALT                     
0068: 71 10    OR    F,0x10             (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0249)     M8C_EnableWatchDog
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) IF ( SELECT_32K )
                                        (0253)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0254) ELSE
007B: 41 FE FB AND   REG[0xFE],0xFB     (0255)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0256) ENDIF
                                        (0257) 
                                        (0258)     ;---------------------------
                                        (0259)     ; Set up the Temporary stack
                                        (0260)     ;---------------------------
                                        (0261)     ; A temporary stack is set up for the SSC instructions.
                                        (0262)     ; The real stack start will be assigned later.
                                        (0263)     ;
                                        (0264) _stack_start:          equ 80h
007E: 50 80    MOV   A,0x80             (0265)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0080: 4E       SWAP  SP,A               (0266)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0267) 
                                        (0268)     ;-----------------------------------------------
                                        (0269)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0270)     ;-----------------------------------------------
                                        (0271) 
                                        (0272) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0273)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0274)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0275)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0276)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0277)   IF ( AGND_BYPASS )
                                        (0278)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0279)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0280)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0281)     ; value using the proper trim values.
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0284)   ENDIF
                                        (0285)  ENDIF
                                        (0286) ENDIF ; 5.0 V Operation
                                        (0287) 
                                        (0288) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0289)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0290)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0291)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0292)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0293)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ENDIF
                                        (0295) ENDIF ; 3.3 Volt Operation
                                        (0296) 
0081: 55 F8 00 MOV   [0xF8],0x0         (0297)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0084: 55 F9 00 MOV   [0xF9],0x0         (0298)     mov  [bSSC_KEYSP], 0
                                        (0299) 
                                        (0300)     ;---------------------------------------
                                        (0301)     ; Initialize Crystal Oscillator and PLL
                                        (0302)     ;---------------------------------------
                                        (0303) 
                                        (0304) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0305)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0306)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0307)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0308)     ; the ECO to stabilize.
                                        (0309)     ;
                                        (0310)     M8C_SetBank1
                                        (0311)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0312)     M8C_SetBank0
                                        (0313)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0314)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0315)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0316) .WaitFor1s:
                                        (0317)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0318)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0319)                                           ;   since interrupts are not globally enabled
                                        (0320) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0321)     ; Either no ECO, or waiting for stable clock is to be done in main
0087: 71 10    OR    F,0x10             (0322)     M8C_SetBank1
0089: 62 E0 02 MOV   REG[0xE0],0x2      (0323)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008C: 70 EF    AND   F,0xEF             (0324)     M8C_SetBank0
008E: 62 E3 38 MOV   REG[0xE3],0x38     (0325)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0326) 
                                        (0327) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0328) 
                                        (0329) IF ( PLL_MODE )
                                        (0330)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0331)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0332)     ;
                                        (0333)     M8C_SetBank1
                                        (0334)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0335)     M8C_SetBank0
                                        (0336)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0337)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0338) 
                                        (0339) .WaitFor16ms:
                                        (0340)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0341)     jz   .WaitFor16ms
                                        (0342)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0343)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0344)     M8C_SetBank0
                                        (0345) 
                                        (0346) IF      ( WAIT_FOR_32K )
                                        (0347) ELSE ; !( WAIT_FOR_32K )
                                        (0348)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0349)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0350) ENDIF ;(WAIT_FOR_32K)
                                        (0351) ENDIF ;(PLL_MODE)
                                        (0352) 
                                        (0353)     ;------------------------
                                        (0354)     ; Close CT leakage path.
                                        (0355)     ;------------------------
0091: 62 71 05 MOV   REG[0x71],0x5      (0356)     mov   reg[ACB00CR0], 05h
0094: 62 75 05 MOV   REG[0x75],0x5      (0357)     mov   reg[ACB01CR0], 05h
0097: 62 79 05 MOV   REG[0x79],0x5      (0358)     mov   reg[ACB02CR0], 05h
009A: 62 7D 05 MOV   REG[0x7D],0x5      (0359)     mov   reg[ACB03CR0], 05h
                                        (0360) 
                                        (0361) 
                                        (0362) IF	(TOOLCHAIN & HITECH)
                                        (0363)     ;---------------------------------------------
                                        (0364)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0365)     ;---------------------------------------------
                                        (0366) 	global		__Lstackps
                                        (0367) 	mov     a,low __Lstackps
                                        (0368) 	swap    a,sp
                                        (0369) 
                                        (0370) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0371)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0372)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0373)     RAM_SETPAGE_CUR 0
                                        (0374)     RAM_SETPAGE_MVW 0
                                        (0375)     RAM_SETPAGE_MVR 0
                                        (0376)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0377)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0378)     ELSE
                                        (0379)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0380)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0381) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0382) ELSE
                                        (0383)     ;---------------------------------------------
                                        (0384)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0385)     ;---------------------------------------------
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
009D: 62 D1 07 MOV   REG[0xD1],0x7      (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A0: 50 00    MOV   A,0x0              (0388)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A2: 4E       SWAP  SP,A               (0389)     swap  A, SP
00A3: 62 D3 07 MOV   REG[0xD3],0x7      (0390)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00A6: 62 D0 00 MOV   REG[0xD0],0x0      (0391)     RAM_SETPAGE_CUR 0
00A9: 62 D5 00 MOV   REG[0xD5],0x0      (0392)     RAM_SETPAGE_MVW 0
00AC: 62 D4 00 MOV   REG[0xD4],0x0      (0393)     RAM_SETPAGE_MVR 0
                                        (0394) 
                                        (0395)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00AF: 71 C0    OR    F,0xC0             (0396)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0397)   ELSE
                                        (0398)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0399)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0400) ELSE
                                        (0401)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0402)     swap  SP, A
                                        (0403) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0404) ENDIF ;	TOOLCHAIN
                                        (0405) 
                                        (0406)     ;-------------------------
                                        (0407)     ; Load Base Configuration
                                        (0408)     ;-------------------------
                                        (0409)     ; Load global parameter settings and load the user modules in the
                                        (0410)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0411)     ; to minimize start up time; (2) We may still need to play with the
                                        (0412)     ; Sleep Timer.
                                        (0413)     ;
00B1: 7C 03 37 LCALL 0x0337             (0414)     lcall LoadConfigInit
                                        (0415) 
                                        (0416)     ;-----------------------------------
                                        (0417)     ; Initialize C Run-Time Environment
                                        (0418)     ;-----------------------------------
                                        (0419) IF ( C_LANGUAGE_SUPPORT )
                                        (0420) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0421)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0422)     mov  [__r0],<__bss_start
                                        (0423) BssLoop:
                                        (0424)     cmp  [__r0],<__bss_end
                                        (0425)     jz   BssDone
                                        (0426)     mvi  [__r0],A
                                        (0427)     jmp  BssLoop
                                        (0428) BssDone:
                                        (0429)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0430)     mov  X,<__idata_start
                                        (0431)     mov  [__r0],<__data_start
                                        (0432) IDataLoop:
                                        (0433)     cmp  [__r0],<__data_end
                                        (0434)     jz   C_RTE_Done
                                        (0435)     push A
                                        (0436)     romx
                                        (0437)     mvi  [__r0],A
                                        (0438)     pop  A
                                        (0439)     inc  X
                                        (0440)     adc  A,0
                                        (0441)     jmp  IDataLoop
                                        (0442) 
                                        (0443) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0444) 
                                        (0445) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B4: 62 D0 00 MOV   REG[0xD0],0x0      (0446)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0447)                                        ; to use the Virtual Register page.
                                        (0448) 
                                        (0449)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0450)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0451)     ; text segment and may have been relocated by the Code Compressor.
                                        (0452)     ;
00B7: 50 03    MOV   A,0x3              (0453)     mov   A, >__pXIData                ; Get the address of the flash
00B9: 57 35    MOV   X,0x35             (0454)     mov   X, <__pXIData                ;   pointer to the xidata area.
00BB: 08       PUSH  A                  (0455)     push  A
00BC: 28       ROMX                     (0456)     romx                               ; get the MSB of xidata's address
00BD: 53 20    MOV   [__r0],A           (0457)     mov   [__r0], A
00BF: 18       POP   A                  (0458)     pop   A
00C0: 75       INC   X                  (0459)     inc   X
00C1: 09 00    ADC   A,0x0              (0460)     adc   A, 0
00C3: 28       ROMX                     (0461)     romx                               ; get the LSB of xidata's address
00C4: 4B       SWAP  A,X                (0462)     swap  A, X
00C5: 51 20    MOV   A,[__r0]           (0463)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0464)                                        ;   XIData structure list in flash
00C7: 80 04    JMP   0x00CC             (0465)     jmp   .AccessStruct
                                        (0466) 
                                        (0467)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0468)     ; values of C variables. Each structure contains 3 member elements.
                                        (0469)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0470)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0471)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0472)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0473)     ; value in the second member element, an unsigned byte:
                                        (0474)     ; (1) If the value of the second element is non-zero, it represents
                                        (0475)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0476)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0477)     ; the bytes are copied to the block of RAM.
                                        (0478)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0479)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0480)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0481) 
                                        (0482) .AccessNextStructLoop:
00C9: 75       INC   X                  (0483)     inc   X                            ; pXIData++
00CA: 09 00    ADC   A,0x0              (0484)     adc   A, 0
                                        (0485) .AccessStruct:                         ; Entry point for first block
                                        (0486)     ;
                                        (0487)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0488)     ;
00CC: 62 E3 00 MOV   REG[0xE3],0x0      (0489)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CF: 08       PUSH  A                  (0490)     push  A
00D0: 28       ROMX                     (0491)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D1: 60 D5    MOV   REG[0xD5],A        (0492)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D3: 74       INC   A                  (0493)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D4: A0 4B    JZ    0x0120             (0494)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D6: 18       POP   A                  (0495)     pop   A                            ; restore pXIData to [A,X]
00D7: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D8: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00DA: 08       PUSH  A                  (0498)     push  A
00DB: 28       ROMX                     (0499)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00DC: 53 20    MOV   [__r0],A           (0500)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00DE: 18       POP   A                  (0501)     pop   A                            ; restore pXIData to [A,X]
00DF: 75       INC   X                  (0502)     inc   X                            ; pXIData++ (point to size)
00E0: 09 00    ADC   A,0x0              (0503)     adc   A, 0
00E2: 08       PUSH  A                  (0504)     push  A
00E3: 28       ROMX                     (0505)     romx                               ; Get the size (CPU.A <- *pXIData)
00E4: A0 1C    JZ    0x0101             (0506)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E6: 53 1F    MOV   [__r1],A           (0507)     mov   [__r1], A                    ;             else downcount in __r1
00E8: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
                                        (0509) 
                                        (0510) .CopyNextByteLoop:
                                        (0511)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0512)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0513)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0514)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0515)     ;
00E9: 75       INC   X                  (0516)     inc   X                            ; pXIData++ (point to next data byte)
00EA: 09 00    ADC   A,0x0              (0517)     adc   A, 0
00EC: 08       PUSH  A                  (0518)     push  A
00ED: 28       ROMX                     (0519)     romx                               ; Get the data value (CPU.A <- *pXIData)
00EE: 3F 20    MVI   [__r0],A           (0520)     mvi   [__r0], A                    ; Transfer the data to RAM
00F0: 47 20 FF TST   [__r0],0xFF        (0521)     tst   [__r0], 0xff                 ; Check for page crossing
00F3: B0 06    JNZ   0x00FA             (0522)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F5: 5D D5    MOV   A,REG[0xD5]        (0523)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F7: 74       INC   A                  (0524)     inc   A
00F8: 60 D5    MOV   REG[0xD5],A        (0525)     mov   reg[ MVW_PP], A
                                        (0526) .CopyLoopTail:
00FA: 18       POP   A                  (0527)     pop   A                            ; restore pXIData to [A,X]
00FB: 7A 1F    DEC   [__r1]             (0528)     dec   [__r1]                       ; End of this array in flash?
00FD: BF EB    JNZ   0x00E9             (0529)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FF: 8F C9    JMP   0x00C9             (0530)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0531) 
                                        (0532) .ClearRAMBlockToZero:
0101: 18       POP   A                  (0533)     pop   A                            ; restore pXIData to [A,X]
0102: 75       INC   X                  (0534)     inc   X                            ; pXIData++ (point to next data byte)
0103: 09 00    ADC   A,0x0              (0535)     adc   A, 0
0105: 08       PUSH  A                  (0536)     push  A
0106: 28       ROMX                     (0537)     romx                               ; Get the run length (CPU.A <- *pXIData)
0107: 53 1F    MOV   [__r1],A           (0538)     mov   [__r1], A                    ; Initialize downcounter
0109: 50 00    MOV   A,0x0              (0539)     mov   A, 0                         ; Initialize source data
                                        (0540) 
                                        (0541) .ClearRAMBlockLoop:
                                        (0542)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0543)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0544)     ;
010B: 3F 20    MVI   [__r0],A           (0545)     mvi   [__r0], A                    ; Clear a byte
010D: 47 20 FF TST   [__r0],0xFF        (0546)     tst   [__r0], 0xff                 ; Check for page crossing
0110: B0 08    JNZ   0x0119             (0547)     jnz   .ClearLoopTail               ;   No crossing, keep going
0112: 5D D5    MOV   A,REG[0xD5]        (0548)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0114: 74       INC   A                  (0549)     inc   A
0115: 60 D5    MOV   REG[0xD5],A        (0550)     mov   reg[ MVW_PP], A
0117: 50 00    MOV   A,0x0              (0551)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0552) .ClearLoopTail:
0119: 7A 1F    DEC   [__r1]             (0553)     dec   [__r1]                       ; Was this the last byte?
011B: BF EF    JNZ   0x010B             (0554)     jnz   .ClearRAMBlockLoop           ;   No,  continue
011D: 18       POP   A                  (0555)     pop   A                            ;   Yes, restore pXIData to [A,X] and
011E: 8F AA    JMP   0x00C9             (0556)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0557) 
                                        (0558) .C_RTE_WrapUp:
0120: 18       POP   A                  (0559)     pop   A                            ; balance stack
                                        (0560) 
                                        (0561) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0562) 
                                        (0563) C_RTE_Done:
                                        (0564) 
                                        (0565) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0566) 
                                        (0567)     ;-------------------------------
                                        (0568)     ; Voltage Stabilization for SMP
                                        (0569)     ;-------------------------------
                                        (0570) 
                                        (0571) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0572) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0573)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0574)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0575)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0576)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0577)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0578)     M8C_SetBank1
                                        (0579)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0580)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0581)     M8C_SetBank0
                                        (0582)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0583)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0584) .WaitFor2ms:
                                        (0585)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0586)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0587) ENDIF ; SMP is operational
                                        (0588) ENDIF ; 5.0V Operation
                                        (0589) 
                                        (0590)     ;-------------------------------
                                        (0591)     ; Set Power-On Reset (POR) Level
                                        (0592)     ;-------------------------------
                                        (0593) 
                                        (0594)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0595)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0596)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0597)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0598)     ;  lead to corruption of PSoC flash.
                                        (0599) 
0121: 71 10    OR    F,0x10             (0600)     M8C_SetBank1
                                        (0601) 
                                        (0602) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0603)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0604)  ELSE                                       ;    No, fast mode
                                        (0605)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0606)                                             ;       no, set midpoint POR in user code, if desired
                                        (0607)   ELSE ; 24HMz                              ;
                                        (0608)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0609)   ENDIF ; 24MHz
                                        (0610)  ENDIF ; Slow Mode
                                        (0611) ENDIF ; 5.0V Operation
                                        (0612) 
0123: 70 EF    AND   F,0xEF             (0613)     M8C_SetBank0
                                        (0614) 
                                        (0615)     ;----------------------------
                                        (0616)     ; Wrap up and invoke "main"
                                        (0617)     ;----------------------------
                                        (0618) 
                                        (0619)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0620)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0621)     ;
0125: 62 E0 00 MOV   REG[0xE0],0x0      (0622)     mov  reg[INT_MSK0],0
                                        (0623) 
                                        (0624)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0625)     ; And put decimator in full mode so it does not consume too much current.
                                        (0626)     ;
0128: 71 10    OR    F,0x10             (0627)     M8C_SetBank1
012A: 62 E0 00 MOV   REG[0xE0],0x0      (0628)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
012D: 43 E7 80 OR    REG[0xE7],0x80     (0629)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0130: 70 EF    AND   F,0xEF             (0630)     M8C_SetBank0
                                        (0631) 
                                        (0632)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0633)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0634)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0635)     ;
0132: 62 E2 00 MOV   REG[0xE2],0x0      (0636)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0637)                                    ; have been set during the boot process.
                                        (0638) IF	(TOOLCHAIN & HITECH)
                                        (0639) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0640) ELSE
                                        (0641) IF ENABLE_LJMP_TO_MAIN
                                        (0642)     ljmp  _main                    ; goto main (no return)
                                        (0643) ELSE
0135: 7C 05 FC LCALL _main|__text_start|_main(0644)     lcall _main                    ; call main
                                        (0645) .Exit:
0138: 8F FF    JMP   0x0138             (0646)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0647) ENDIF
                                        (0648) ENDIF ; TOOLCHAIN
                                        (0649) 
                                        (0650)     ;---------------------------------
                                        (0651)     ; Library Access to Global Parms
                                        (0652)     ;---------------------------------
                                        (0653)     ;
                                        (0654)  bGetPowerSetting:
                                        (0655) _bGetPowerSetting:
                                        (0656)     ; Returns value of POWER_SETTING in the A register.
                                        (0657)     ; No inputs. No Side Effects.
                                        (0658)     ;
013A: 50 10    MOV   A,0x10             (0659)     mov   A, POWER_SETTING
013C: 7F       RET                      (0660)     ret
(0661) 
(0662) IF	(TOOLCHAIN & HITECH)
(0663) ELSE
(0664)     ;---------------------------------
(0665)     ; Order Critical RAM & ROM AREAs
(0666)     ;---------------------------------
(0667)     ;  'TOP' is all that has been defined so far...
(0668) 
(0669)     ;  ROM AREAs for C CONST, static & global items
(0670)     ;
(0671)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
(0672)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
(0673) __idata_start:
(0674) 
(0675)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
(0676) __func_lit_start:
(0677) 
(0678) IF ( SYSTEM_LARGE_MEMORY_MODEL )
(0679)     ; We use the func_lit area to store a pointer to extended initialized
(0680)     ; data (xidata) area that follows the text area. Func_lit isn't
(0681)     ; relocated by the code compressor, but the text area may shrink and
(0682)     ; that moves xidata around.
(0683)     ;
(0684) __pXIData:         word __text_end           ; ptr to extended idata
(0685) ENDIF
(0686) 
(0687)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
(0688)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
(0689) 
(0690)     ; CODE segment for general use
(0691)     ;
(0692)     AREA text (ROM, REL, CON)
(0693) __text_start:
(0694) 
(0695)     ; RAM area usage
(0696)     ;
(0697)     AREA data              (RAM, REL, CON)   ; initialized RAM
(0698) __data_start:
(0699) 
(0700)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
(0701)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
(0702)     AREA bss               (RAM, REL, CON)   ; general use
(0703) __bss_start:
(0704) 
(0705) ENDIF ; TOOLCHAIN
(0706) 
(0707) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_i2c_master_Bank1
                                        (0006) export LoadConfigTBL_i2c_master_Bank0
                                        (0007) export LoadConfigTBL_i2c_master_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_i2c_master_Bank0:
                                        (0010) ;  Instance name UART_1, User Module UART
                                        (0011) ;       Instance name UART_1, Block Name RX(DCB03)
                                        (0012) 	db		2fh, 00h		;UART_1_RX_CONTROL_REG(DCB03CR0)
                                        (0013) 	db		2dh, 00h		;UART_1_(DCB03DR1)
                                        (0014) 	db		2eh, 00h		;UART_1_RX_BUFFER_REG (DCB03DR2)
                                        (0015) ;       Instance name UART_1, Block Name TX(DCB02)
                                        (0016) 	db		2bh, 00h		;UART_1_TX_CONTROL_REG(DCB02CR0)
                                        (0017) 	db		29h, 00h		;UART_1_TX_BUFFER_REG (DCB02DR1)
                                        (0018) 	db		2ah, 00h		;UART_1_(DCB02DR2)
                                        (0019) ;  Global Register values Bank 0
                                        (0020) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0021) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0022) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0023) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0024) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0025) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0026) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0027) 	db		b0h, 01h		; Row_0_InputMux register (RDI0RI)
                                        (0028) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0029) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0030) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0031) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0032) 	db		b5h, 20h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0033) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0034) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0035) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0036) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0037) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0038) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0039) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0040) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0041) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0042) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0043) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0044) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0045) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0046) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0047) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0048) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0049) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0050) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0051) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0052) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0053) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0054) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0055) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0056) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0057) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0058) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0059) 	db		ffh
                                        (0060) LoadConfigTBL_i2c_master_Bank1:
                                        (0061) ;  Instance name UART_1, User Module UART
                                        (0062) ;       Instance name UART_1, Block Name RX(DCB03)
                                        (0063) 	db		2ch, 05h		;UART_1_RX_FUNC_REG   (DCB03FN)
                                        (0064) 	db		2dh, c1h		;UART_1_RX_INPUT_REG  (DCB03IN)
                                        (0065) 	db		2eh, 40h		;UART_1_RX_OUTPUT_REG (DCB03OU)
                                        (0066) ;       Instance name UART_1, Block Name TX(DCB02)
                                        (0067) 	db		28h, 1dh		;UART_1_TX_FUNC_REG   (DCB02FN)
                                        (0068) 	db		29h, 01h		;UART_1_TX_INPUT_REG  (DCB02IN)
                                        (0069) 	db		2ah, 45h		;UART_1_TX_OUTPUT_REG (DCB02OU)
                                        (0070) ;  Global Register values Bank 1
                                        (0071) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0072) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0073) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0074) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0075) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0076) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0077) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0078) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0079) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0080) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0081) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0082) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0083) 	db		e1h, b0h		; OscillatorControl_1 register (OSC_CR1)
                                        (0084) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0085) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0086) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0087) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0088) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0089) 	db		ffh
                                        (0090) LoadConfigTBL_i2c_master_Ordered:
                                        (0091) ;  Ordered Global Register values

(0092) 	M8C_SetBank1
024B: 10       PUSH  X                  
024C: 62 00 00 MOV   REG[0x0],0x0       (0093) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
024F: 62 01 FF MOV   REG[0x1],0xFF      (0094) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0252: 70 EF    AND   F,0xEF             (0095) 	M8C_SetBank0
0254: 62 03 FF MOV   REG[0x3],0xFF      (0096) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0257: 62 02 00 MOV   REG[0x2],0x0       (0097) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
025A: 71 10    OR    F,0x10             (0098) 	M8C_SetBank1
025C: 62 02 00 MOV   REG[0x2],0x0       (0099) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
025F: 62 03 00 MOV   REG[0x3],0x0       (0100) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0262: 70 EF    AND   F,0xEF             (0101) 	M8C_SetBank0
0264: 62 01 00 MOV   REG[0x1],0x0       (0102) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0267: 71 10    OR    F,0x10             (0103) 	M8C_SetBank1
0269: 62 04 00 MOV   REG[0x4],0x0       (0104) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
026C: 62 05 FF MOV   REG[0x5],0xFF      (0105) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
026F: 70 EF    AND   F,0xEF             (0106) 	M8C_SetBank0
0271: 62 07 FF MOV   REG[0x7],0xFF      (0107) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0274: 62 06 00 MOV   REG[0x6],0x0       (0108) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0277: 71 10    OR    F,0x10             (0109) 	M8C_SetBank1
0279: 62 06 00 MOV   REG[0x6],0x0       (0110) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
027C: 62 07 00 MOV   REG[0x7],0x0       (0111) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
027F: 70 EF    AND   F,0xEF             (0112) 	M8C_SetBank0
0281: 62 05 00 MOV   REG[0x5],0x0       (0113) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0284: 71 10    OR    F,0x10             (0114) 	M8C_SetBank1
0286: 62 08 25 MOV   REG[0x8],0x25      (0115) 	mov	reg[08h], 25h		; Port_2_DriveMode_0 register (PRT2DM0)
0289: 62 09 DE MOV   REG[0x9],0xDE      (0116) 	mov	reg[09h], deh		; Port_2_DriveMode_1 register (PRT2DM1)
028C: 70 EF    AND   F,0xEF             (0117) 	M8C_SetBank0
028E: 62 0B CA MOV   REG[0xB],0xCA      (0118) 	mov	reg[0bh], cah		; Port_2_DriveMode_2 register (PRT2DM2)
0291: 62 0A 30 MOV   REG[0xA],0x30      (0119) 	mov	reg[0ah], 30h		; Port_2_GlobalSelect register (PRT2GS)
0294: 71 10    OR    F,0x10             (0120) 	M8C_SetBank1
0296: 62 0A 04 MOV   REG[0xA],0x4       (0121) 	mov	reg[0ah], 04h		; Port_2_IntCtrl_0 register (PRT2IC0)
0299: 62 0B 04 MOV   REG[0xB],0x4       (0122) 	mov	reg[0bh], 04h		; Port_2_IntCtrl_1 register (PRT2IC1)
029C: 70 EF    AND   F,0xEF             (0123) 	M8C_SetBank0
029E: 62 09 04 MOV   REG[0x9],0x4       (0124) 	mov	reg[09h], 04h		; Port_2_IntEn register (PRT2IE)
02A1: 71 10    OR    F,0x10             (0125) 	M8C_SetBank1
02A3: 62 0C 00 MOV   REG[0xC],0x0       (0126) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02A6: 62 0D 00 MOV   REG[0xD],0x0       (0127) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02A9: 70 EF    AND   F,0xEF             (0128) 	M8C_SetBank0
02AB: 62 0F 00 MOV   REG[0xF],0x0       (0129) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02AE: 62 0E 00 MOV   REG[0xE],0x0       (0130) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02B1: 71 10    OR    F,0x10             (0131) 	M8C_SetBank1
02B3: 62 0E 00 MOV   REG[0xE],0x0       (0132) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02B6: 62 0F 00 MOV   REG[0xF],0x0       (0133) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02B9: 70 EF    AND   F,0xEF             (0134) 	M8C_SetBank0
02BB: 62 0D 00 MOV   REG[0xD],0x0       (0135) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02BE: 71 10    OR    F,0x10             (0136) 	M8C_SetBank1
02C0: 62 10 00 MOV   REG[0x10],0x0      (0137) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02C3: 62 11 00 MOV   REG[0x11],0x0      (0138) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02C6: 70 EF    AND   F,0xEF             (0139) 	M8C_SetBank0
02C8: 62 13 00 MOV   REG[0x13],0x0      (0140) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02CB: 62 12 00 MOV   REG[0x12],0x0      (0141) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02CE: 71 10    OR    F,0x10             (0142) 	M8C_SetBank1
02D0: 62 12 00 MOV   REG[0x12],0x0      (0143) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02D3: 62 13 00 MOV   REG[0x13],0x0      (0144) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02D6: 70 EF    AND   F,0xEF             (0145) 	M8C_SetBank0
02D8: 62 11 00 MOV   REG[0x11],0x0      (0146) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02DB: 71 10    OR    F,0x10             (0147) 	M8C_SetBank1
02DD: 62 14 00 MOV   REG[0x14],0x0      (0148) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02E0: 62 15 00 MOV   REG[0x15],0x0      (0149) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02E3: 70 EF    AND   F,0xEF             (0150) 	M8C_SetBank0
02E5: 62 17 00 MOV   REG[0x17],0x0      (0151) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02E8: 62 16 00 MOV   REG[0x16],0x0      (0152) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02EB: 71 10    OR    F,0x10             (0153) 	M8C_SetBank1
02ED: 62 16 00 MOV   REG[0x16],0x0      (0154) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02F0: 62 17 00 MOV   REG[0x17],0x0      (0155) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02F3: 70 EF    AND   F,0xEF             (0156) 	M8C_SetBank0
02F5: 62 15 00 MOV   REG[0x15],0x0      (0157) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02F8: 71 10    OR    F,0x10             (0158) 	M8C_SetBank1
02FA: 62 18 00 MOV   REG[0x18],0x0      (0159) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02FD: 62 19 00 MOV   REG[0x19],0x0      (0160) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0300: 70 EF    AND   F,0xEF             (0161) 	M8C_SetBank0
0302: 62 1B 00 MOV   REG[0x1B],0x0      (0162) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0305: 62 1A 00 MOV   REG[0x1A],0x0      (0163) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0308: 71 10    OR    F,0x10             (0164) 	M8C_SetBank1
030A: 62 1A 00 MOV   REG[0x1A],0x0      (0165) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
030D: 62 1B 00 MOV   REG[0x1B],0x0      (0166) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0310: 70 EF    AND   F,0xEF             (0167) 	M8C_SetBank0
0312: 62 19 00 MOV   REG[0x19],0x0      (0168) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0315: 71 10    OR    F,0x10             (0169) 	M8C_SetBank1
0317: 62 1C 00 MOV   REG[0x1C],0x0      (0170) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
031A: 62 1D 00 MOV   REG[0x1D],0x0      (0171) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
031D: 70 EF    AND   F,0xEF             (0172) 	M8C_SetBank0
031F: 62 1F 00 MOV   REG[0x1F],0x0      (0173) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0322: 62 1E 00 MOV   REG[0x1E],0x0      (0174) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0325: 71 10    OR    F,0x10             (0175) 	M8C_SetBank1
0327: 62 1E 00 MOV   REG[0x1E],0x0      (0176) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
032A: 62 1F 00 MOV   REG[0x1F],0x0      (0177) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
032D: 70 EF    AND   F,0xEF             (0178) 	M8C_SetBank0
032F: 62 1D 00 MOV   REG[0x1D],0x0      (0179) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0332: 70 EF    AND   F,0xEF             (0180) 	M8C_SetBank0
0334: 7F       RET                      (0181) 	ret
(0182) 
(0183) 
(0184) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_i2c_master
                                        (0026) export _LoadConfig_i2c_master
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     

(0058) 	lcall	LoadConfig_i2c_master
0338: 03 3E    ADD   A,[X+62]           
033A: 7C 02 4A LCALL 0x024A             (0059) 	lcall	LoadConfigTBL_i2c_master_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
033D: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration i2c_master
                                        (0067) ;
                                        (0068) ;    Load configuration registers for i2c_master.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_i2c_master:
                                        (0085)  LoadConfig_i2c_master:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
033E: 10       PUSH  X                  (0088) 	push	x
033F: 70 EF    AND   F,0xEF             (0089)     M8C_SetBank0                    ; Force bank 0
0341: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0343: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0344: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_i2c_master_Bank0
0346: 57 BE    MOV   X,0xBE             (0094)     mov     X, <LoadConfigTBL_i2c_master_Bank0
0348: 7C 03 59 LCALL 0x0359             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
034B: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
034D: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
034E: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_i2c_master_Bank1
0350: 57 19    MOV   X,0x19             (0101)     mov     X, <LoadConfigTBL_i2c_master_Bank1
0352: 7C 03 59 LCALL 0x0359             (0102)     lcall   LoadConfig              ; Load the bank 1 values
                                        (0103) 
0355: 70 EF    AND   F,0xEF             (0104)     M8C_SetBank0                    ; Force return to bank 0
0357: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0358: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0359: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
035B: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
035C: 08       PUSH  A                  (0132)     push    A
035D: 4F       MOV   X,SP               (0133)     mov     X, SP
035E: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0361: D0 04    JNC   0x0366             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0363: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0366: 18       POP   A                  (0138)     pop     A
0367: 20       POP   X                  (0139)     pop     X
                                        (0140) 
                                        (0141) LoadConfigLp:
0368: 70 EF    AND   F,0xEF             (0142)     M8C_SetBank0                    ; Switch to bank 0
036A: 62 E3 00 MOV   REG[0xE3],0x0      (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
036D: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
036E: 08       PUSH  A                  (0145)     push    A
036F: 28       ROMX                     (0146)     romx                            ; Load register address from table
0370: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0372: A0 1F    JZ    0x0392             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0374: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0375: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
0378: A0 03    JZ    0x037C             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
037A: 71 10    OR    F,0x10             (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
037C: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
037E: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
037F: 20       POP   X                  (0156)     pop     X
0380: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0381: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0383: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0384: 08       PUSH  A                  (0160)     push    A
0385: 28       ROMX                     (0161)     romx                            ; load config data from the table
0386: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0387: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
0389: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
038B: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
038C: 20       POP   X                  (0166)     pop     X
038D: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
038E: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0390: 8F D7    JMP   0x0368             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0392: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0394: 70 3F    AND   F,0x3F             
0396: 71 C0    OR    F,0xC0             (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0398: 7F       RET                      (0173)     ret
(0174) 
(0175) AREA InterruptRAM(ram, rel)
(0176) 
(0177) NO_SHADOW:
(0178) _NO_SHADOW:
FILE: lib\uart_1int.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UART_1INT.asm
                                        (0004) ;;  Version: 5.2, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_1_TX_ISR
                                        (0022) export  _UART_1_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_1_RXBUF_ENABLE)
                                        (0025) export  UART_1_aRxBuffer
                                        (0026) export _UART_1_aRxBuffer
                                        (0027) export  UART_1_bRxCnt
                                        (0028) export _UART_1_bRxCnt
                                        (0029) export  UART_1_fStatus
                                        (0030) export _UART_1_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_1_RXBUF_ENABLE)
                                        (0040)  UART_1_fStatus:
                                        (0041) _UART_1_fStatus:      BLK  1
                                        (0042)  UART_1_bRxCnt:
                                        (0043) _UART_1_bRxCnt:       BLK  1
                                        (0044) AREA UART_1_RAM (RAM, REL, CON)
                                        (0045)  UART_1_aRxBuffer:
                                        (0046) _UART_1_aRxBuffer:    BLK UART_1_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_1_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_1_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
0399: 7D 06 29 LJMP  _INT_UART_RX       (0097)    ljmp _INT_UART_RX
                                        (0098) 	
                                        (0099)    ;---------------------------------------------------
                                        (0100)    ; Insert your custom code above this banner
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ;@PSoC_UserCode_END@ (Do not change this line.)
039C: 7E       RETI                     (0103)    reti
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _UART_1_RX_ISR
                                        (0108) ;
                                        (0109) ;  DESCRIPTION:
                                        (0110) ;     UART RX interrupt handler for instance UART_1.
                                        (0111) ;     This ISR handles the background processing of received characters if
                                        (0112) ;     the buffer is enabled.
                                        (0113) ;
                                        (0114) ;
                                        (0115) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0116) ;
                                        (0117) ;  SIDE EFFECTS:
                                        (0118) ;     There are 3 posible errors that may occur with the serial port.
                                        (0119) ;      1) Parity Error
                                        (0120) ;      2) Framing Error
                                        (0121) ;      3) OverRun Error
                                        (0122) ;
                                        (0123) ;  This user module check for parity and framing error.  If either of these
                                        (0124) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0125) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0126) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0127) ;  this ISR to set a flag if an error condition occurs.
                                        (0128) ;
                                        (0129) ;  THEORY of OPERATION:
                                        (0130) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0131) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0132) ;     the command terminator is detected, the command bit is set and all other
                                        (0133) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0134) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0135) ;     terminator.  After that, the characters will be discarded, although
                                        (0136) ;     a command determinator will still cause the command bit to be set.
                                        (0137) ;
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) _UART_1_RX_ISR:
                                        (0140) 
                                        (0141)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ; Insert your custom code below this banner
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;   NOTE: interrupt service routines must preserve
                                        (0146)    ;   the values of the A and X CPU registers.
                                        (0147) 
                                        (0148)    ;---------------------------------------------------
                                        (0149)    ; Insert your custom code above this banner
                                        (0150)    ;---------------------------------------------------
                                        (0151)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0152) 
                                        (0153) IF (UART_1_RXBUF_ENABLE)
039D: 08       PUSH  A                  (0154)    push A
039E: 10       PUSH  X                  (0155)    push X
                                        (0156)    
                                        (0157)    IF SYSTEM_LARGE_MEMORY_MODEL
039F: 5D D3    MOV   A,REG[0xD3]        
03A1: 08       PUSH  A                  (0158)       REG_PRESERVE IDX_PP
                                        (0159)    ENDIF
                                        (0160)    
03A2: 58 01    MOV   X,[0x1]            (0161)    mov  X,[UART_1_bRxCnt]                                  ; Load X with byte counter
03A4: 5D 2F    MOV   A,REG[0x2F]        (0162)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Read the control register
03A6: 08       PUSH  A                  (0163)    push A                                                  ; Store copy for later test
                                        (0164)                                                            ; IF real RX interrupt
03A7: 21 08    AND   A,0x8              (0165)    and  A,UART_1_RX_REG_FULL                               ; Did really really get an IRQ
03A9: B0 04    JNZ   0x03AE             (0166)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
03AB: 18       POP   A                  (0167)    pop  A                                                  ; Restore stack
03AC: 80 5E    JMP   0x040B             (0168)    jmp  .RESTORE_IDX_PP
                                        (0169) 
                                        (0170) .UARTRX_ReadRx:
03AE: 18       POP   A                  (0171)    pop  A                                                  ; Restore status flags
                                        (0172)                                                            ; IF there is no error, get data
                                        (0173)                                                            ; Check for parity or framing error
03AF: 21 E0    AND   A,0xE0             (0174)    and  A,UART_1_RX_ERROR
03B1: A0 12    JZ    0x03C4             (0175)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0176) 
03B3: 2C 00    OR    [0x0],A            (0177)    or   [UART_1_fStatus],A                                 ; Set error flags (parity,framing,overrun) bits
03B5: 49 2E 00 TST   REG[0x2E],0x0      (0178)    tst  REG[UART_1_RX_BUFFER_REG], 0x00                    ; Read the data buffer to clear it.
03B8: 21 20    AND   A,0x20             (0179)    and  A,UART_1_RX_FRAMING_ERROR                          ; Check for framing error special case
03BA: A0 50    JZ    0x040B             (0180)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0181) 
                                        (0182)                                                            ; Disable and re-enable RX to reset after
                                        (0183)                                                            ; framing error.
03BC: 41 2F FE AND   REG[0x2F],0xFE     (0184)    and   REG[UART_1_RX_CONTROL_REG], ~UART_1_RX_ENABLE     ; Disable RX
03BF: 43 2F 01 OR    REG[0x2F],0x1      (0185)    or    REG[UART_1_RX_CONTROL_REG],  UART_1_RX_ENABLE     ; Enable RX
03C2: 80 48    JMP   0x040B             (0186)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0187) 
                                        (0188) 
                                        (0189) .UARTRX_NO_ERROR:
03C4: 5D 2E    MOV   A,REG[0x2E]        (0190)    mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read the data buffer
                                        (0191) 
                                        (0192)                                                            ; IF buffer not full
03C6: 47 00 01 TST   [0x0],0x1          (0193)    tst  [UART_1_fStatus],UART_1_RX_BUF_CMDTERM             ; Check for buffer full
03C9: B0 41    JNZ   0x040B             (0194)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0195) 
03CB: 39 0D    CMP   A,0xD              (0196)    cmp  A,UART_1_CMD_TERM                                  ; Check for End of command
03CD: B0 14    JNZ   0x03E2             (0197)    jnz  .UARTRX_CHK_BACKSPACE
03CF: 2E 00 01 OR    [0x0],0x1          (0198)    or   [UART_1_fStatus],UART_1_RX_BUF_CMDTERM             ; Set command ready bit
                                        (0199) 
                                        (0200) 
                                        (0201) 
03D2: 62 D3 00 MOV   REG[0xD3],0x0      (0202)    RAM_SETPAGE_IDX >UART_1_aRxBuffer
03D5: 70 3F    AND   F,0x3F             
03D7: 71 80    OR    F,0x80             (0203)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
03D9: 56 02 00 MOV   [X+2],0x0          (0204)    mov  [X + UART_1_aRxBuffer],00h                         ; Zero out last data
03DC: 70 3F    AND   F,0x3F             
03DE: 71 00    OR    F,0x0              (0205)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
03E0: 80 2A    JMP   0x040B             (0206)    jmp  .RESTORE_IDX_PP
                                        (0207) 
                                        (0208) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0209) IF(UART_1_BACKSPACE_ENABLE)                                ; Enable if backspace/delete mode
                                        (0210)    cmp  A,UART_1_BACKSPACE_ENABLE                          ; Check for backspace character
                                        (0211)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0212)    cmp  [UART_1_bRxCnt],00h                                ; Check if buffer empty
                                        (0213)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0214)    dec  [UART_1_bRxCnt]                                    ; Decrement buffer count by one.
                                        (0215)    jmp  .RESTORE_IDX_PP
                                        (0216) ENDIF                                                      ; 
                                        (0217) 
                                        (0218) .UARTRX_IGNORE:
                                        (0219) IF(UART_1_RX_IGNORE_BELOW)                                 ; Ignore charaters below this value
03E2: 39 20    CMP   A,0x20             (0220)    cmp  A,UART_1_RX_IGNORE_BELOW                           ; If ignore char is set to 0x00, do not
03E4: C0 26    JC    0x040B             (0221)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0222) ENDIF
                                        (0223) 
                                        (0224) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0225) 	
03E6: 62 D3 00 MOV   REG[0xD3],0x0      (0226)    RAM_SETPAGE_IDX >UART_1_aRxBuffer                       ;   using idexed address mode
03E9: 3C 01 0F CMP   [0x1],0xF          (0227)    cmp  [UART_1_bRxCnt],(UART_1_RX_BUFFER_SIZE - 1)
03EC: C0 11    JC    0x03FE             (0228)    jc   .UARTRX_ISR_GETDATA
03EE: 70 3F    AND   F,0x3F             
03F0: 71 80    OR    F,0x80             (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
03F2: 56 02 00 MOV   [X+2],0x0          (0230)    mov  [X + UART_1_aRxBuffer],00h                         ; Zero out last data in the buffer
03F5: 70 3F    AND   F,0x3F             
03F7: 71 00    OR    F,0x0              (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
03F9: 2E 00 10 OR    [0x0],0x10         (0232)    or   [UART_1_fStatus],UART_1_RX_BUF_OVERRUN             ; Set error flags (parity,framing,overrun) bits
03FC: 80 0E    JMP   0x040B             (0233)    jmp  .RESTORE_IDX_PP
                                        (0234) 
                                        (0235) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0236)                                                            ; X is already loaded with pointer
03FE: 70 3F    AND   F,0x3F             
0400: 71 80    OR    F,0x80             (0237)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0402: 54 02    MOV   [X+2],A            (0238)    mov  [X+UART_1_aRxBuffer],A                             ; store data in array
0404: 70 3F    AND   F,0x3F             
0406: 71 00    OR    F,0x0              (0239)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0408: 75       INC   X                  (0240)    inc  X                                                  ; Inc the pointer
0409: 5A 01    MOV   [0x1],X            (0241)    mov  [UART_1_bRxCnt],X                                  ; Restore the pointer
                                        (0242)                                                            ; ENDIF max string size
                                        (0243) .RESTORE_IDX_PP:
                                        (0244)    IF SYSTEM_LARGE_MEMORY_MODEL
040B: 18       POP   A                  
040C: 60 D3    MOV   REG[0xD3],A        (0245)       REG_RESTORE IDX_PP
                                        (0246)    ENDIF
                                        (0247) 
                                        (0248) .END_UARTRX_ISR:
040E: 20       POP   X                  (0249)    pop  X
040F: 18       POP   A                  (0250)    pop  A
                                        (0251) 
                                        (0252) ENDIF
                                        (0253) 
                                        (0254) UART_1_RX_ISR_END:
0410: 7E       RETI                     (0255)    reti
(0256) 
(0257) ; end of file UART_1INT.asm
(0258) 
FILE: lib\uart_1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   UART_1.asm
                                        (0004) ;;  Version: 5.2, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART_1.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_1_SetTxIntMode
                                        (0041) export _UART_1_SetTxIntMode
                                        (0042) export  UART_1_EnableInt
                                        (0043) export _UART_1_EnableInt
                                        (0044) export  UART_1_DisableInt
                                        (0045) export _UART_1_DisableInt
                                        (0046) 
                                        (0047) export  UART_1_Start
                                        (0048) export _UART_1_Start
                                        (0049) export  UART_1_Stop
                                        (0050) export _UART_1_Stop
                                        (0051) export  UART_1_SendData
                                        (0052) export _UART_1_SendData
                                        (0053) export  UART_1_bReadTxStatus
                                        (0054) export _UART_1_bReadTxStatus
                                        (0055) export  UART_1_bReadRxData
                                        (0056) export _UART_1_bReadRxData
                                        (0057) export  UART_1_bReadRxStatus
                                        (0058) export _UART_1_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_1_IntCntl
                                        (0061) export _UART_1_IntCntl
                                        (0062) 
                                        (0063) export  UART_1_TxIntMode
                                        (0064) export _UART_1_TxIntMode
                                        (0065) 
                                        (0066) export  UART_1_PutSHexByte
                                        (0067) export _UART_1_PutSHexByte
                                        (0068) export  UART_1_PutSHexInt
                                        (0069) export _UART_1_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_1_CPutString
                                        (0072) export _UART_1_CPutString
                                        (0073) export  UART_1_PutString
                                        (0074) export _UART_1_PutString
                                        (0075) export  UART_1_PutChar
                                        (0076) export _UART_1_PutChar
                                        (0077) export  UART_1_Write
                                        (0078) export _UART_1_Write
                                        (0079) export  UART_1_CWrite
                                        (0080) export _UART_1_CWrite
                                        (0081) 
                                        (0082) export  UART_1_cGetChar
                                        (0083) export _UART_1_cGetChar
                                        (0084) export  UART_1_cReadChar
                                        (0085) export _UART_1_cReadChar
                                        (0086) export  UART_1_iReadChar
                                        (0087) export _UART_1_iReadChar
                                        (0088) export  UART_1_PutCRLF
                                        (0089) export _UART_1_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_1_RXBUF_ENABLE)
                                        (0092) export  UART_1_CmdReset
                                        (0093) export _UART_1_CmdReset
                                        (0094) export  UART_1_bCmdCheck
                                        (0095) export _UART_1_bCmdCheck
                                        (0096) export  UART_1_bCmdLength
                                        (0097) export _UART_1_bCmdLength
                                        (0098) export  UART_1_bErrCheck
                                        (0099) export _UART_1_bErrCheck
                                        (0100) 
                                        (0101) export  UART_1_szGetParam
                                        (0102) export _UART_1_szGetParam
                                        (0103) export  UART_1_szGetRestOfParams
                                        (0104) export _UART_1_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_1_ReadTxStatus
                                        (0114) export _bUART_1_ReadTxStatus
                                        (0115) export  bUART_1_ReadRxData
                                        (0116) export _bUART_1_ReadRxData
                                        (0117) export  bUART_1_ReadRxStatus
                                        (0118) export _bUART_1_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_1_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_1_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_1_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_1_EnableInt:
                                        (0177) _UART_1_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
0411: 43 E1 04 OR    REG[0xE1],0x4      (0179)    M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
0414: 43 E1 08 OR    REG[0xE1],0x8      (0180)    M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0417: 7F       RET                      (0182)    ret
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_1_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_1_DisableInt:
                                        (0209) _UART_1_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
0418: 41 E1 FB AND   REG[0xE1],0xFB     (0211)    M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
041B: 41 E1 F7 AND   REG[0xE1],0xF7     (0212)    M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
041E: 7F       RET                      (0214)    ret
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_1_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_1_SetTxIntMode:
                                        (0245) _UART_1_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
041F: 71 10    OR    F,0x10             (0247)    M8C_SetBank1
0421: 21 01    AND   A,0x1              (0248)    and   A, UART_1_INT_MODE_TX_COMPLETE
0423: A0 07    JZ    0x042B             (0249)    jz    .SetModeRegEmpty
0425: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_1_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0428: 70 EF    AND   F,0xEF             (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
042A: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
042B: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_1_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
042E: 70 EF    AND   F,0xEF             (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0430: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_1_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_1_Start:
                                        (0286) _UART_1_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0431: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0433: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_1_TX_CONTROL_REG], A
0435: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_1_RX_CONTROL_REG], A
                                        (0293) IF ( UART_1_RXBUF_ENABLE )
0437: 91 2A    CALL  0x0563             (0294)    call  _UART_1_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0439: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_1_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_1_Stop:
                                        (0323) _UART_1_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
043A: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_1_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
043D: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_1_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0440: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_1_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_1_SendData:
                                        (0354) _UART_1_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0441: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_1_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0443: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_1_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_1_bReadTxStatus:
                                        (0385) _UART_1_bReadTxStatus:
                                        (0386)  bUART_1_ReadTxStatus:                           ; For backwards compatibility only
                                        (0387) _bUART_1_ReadTxStatus:                           ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0444: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_1_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0446: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_1_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_1_bReadRxData:
                                        (0418) _UART_1_bReadRxData:
                                        (0419)  bUART_1_ReadRxData:                             ; For backwards compatibility only
                                        (0420) _bUART_1_ReadRxData:                             ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0447: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_1_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0449: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_1_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_1_bReadRxStatus:
                                        (0452) _UART_1_bReadRxStatus:
                                        (0453)  bUART_1_ReadRxStatus:                           ; For backwards compatibility only
                                        (0454) _bUART_1_ReadRxStatus:                           ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
044A: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_1_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
044C: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_1_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_1_TxIntMode:
                                        (0486) _UART_1_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
044D: 21 01    AND   A,0x1              (0489)    and  A,UART_1_INT_MODE_TX_COMPLETE
044F: 71 10    OR    F,0x10             (0490)    M8C_SetBank1
0451: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_1_INT_MODE_TX_COMPLETE
0453: A0 06    JZ    0x045A             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0455: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_1_TX_FUNC_REG],0xEF             ; Set Interrupt on Tx_Reg_Empty
0458: 80 04    JMP   0x045D             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
045A: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_1_TX_FUNC_REG],0x10
                                        (0499) 
                                        (0500) .TxIntMode_End:
045D: 70 EF    AND   F,0xEF             (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
045F: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_1_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_1_IntCntl:
                                        (0533) _UART_1_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0460: 08       PUSH  A                  (0536)    push A
0461: 21 01    AND   A,0x1              (0537)    and  A,UART_1_ENABLE_RX_INT
0463: A0 06    JZ    0x046A             (0538)    jz   .DisRxInt
                                        (0539)      ; Enable Rx Interrupt
0465: 43 E1 08 OR    REG[0xE1],0x8      (0540)    M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
0468: 80 04    JMP   0x046D             (0541)    jmp  .CheckTxInt
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
046A: 41 E1 F7 AND   REG[0xE1],0xF7     (0544)    M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
046D: 18       POP   A                  (0547)    pop  A
046E: 21 02    AND   A,0x2              (0548)    and  A,UART_1_ENABLE_TX_INT
0470: A0 06    JZ    0x0477             (0549)    jz   .DisTxInt
                                        (0550)      ; Enable Tx Interrupt
0472: 43 E1 04 OR    REG[0xE1],0x4      (0551)    M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
0475: 80 04    JMP   0x047A             (0552)    jmp  .End_IntCntl
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
0477: 41 E1 FB AND   REG[0xE1],0xFB     (0555)    M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
047A: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_1_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_1_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_1_PutSHexByte:
                                        (0599) _UART_1_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
047B: 30       HALT                     
047C: 31 32    XOR   A,0x32             
047E: 33 34    XOR   A,[X+52]           
0480: 35 36    XOR   [X+54],A           
0482: 37 38 39 XOR   [X+56],0x39        
0485: 41 42 43 AND   REG[0x42],0x43     
0488: 44 45 46 OR    REG[X+0x45],0x46   
048B: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
048C: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
048D: 67       ASR   A                  (0603)    asr   A
048E: 67       ASR   A                  (0604)    asr   A
048F: 67       ASR   A                  (0605)    asr   A
0490: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0492: FF E7    INDEX 0x047B             (0607)    index UART_1_HEX_STR                ; Get Hex value
0494: 90 0F    CALL  0x04A5             (0608)    call  UART_1_PutChar                ; Write data to screen
0496: 18       POP   A                  (0609)    pop   A                             ; Restore value
0497: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0499: FF E0    INDEX 0x047B             (0611)    index UART_1_HEX_STR                ; Get Hex value
049B: 90 08    CALL  0x04A5             (0612)    call  UART_1_PutChar                ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
049D: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_1_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_1_PutSHexInt:
                                        (0643) _UART_1_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
049E: 4B       SWAP  A,X                (0645)    swap  A,X
049F: 9F EA    CALL  0x048B             (0646)    call  UART_1_PutSHexByte            ; Print MSB
04A1: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
04A2: 9F E7    CALL  0x048B             (0648)    call  UART_1_PutSHexByte            ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
04A4: 7F       RET                      (0650)    ret
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_1_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_1_TX_CONTROL_REG], UART_1_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_1_TX_BUFFER_REG], @Source        ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_1_PutChar:
                                        (0684) _UART_1_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
04A5: 49 2B 10 TST   REG[0x2B],0x10     
04A8: AF FC    JZ    0x04A5             
04AA: 60 29    MOV   REG[0x29],A        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
04AC: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_1_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_1_cGetChar:
                                        (0718) _UART_1_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
04AD: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_1_RX_CONTROL_REG],UART_1_RX_REG_FULL    ; Check if a character is ready
04B0: AF FC    JZ    0x04AD             (0721)    jz  UART_1_cGetChar                              ; If not loop
04B2: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_1_RX_BUFFER_REG]                 ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
04B4: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_1_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_1_cReadChar:
                                        (0753) _UART_1_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
04B5: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
04B7: 08       PUSH  A                  (0756)    push A
04B8: 21 08    AND   A,0x8              (0757)    and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
04BA: B0 04    JNZ   0x04BF             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
04BC: 18       POP   A                  (0759)    pop  A
04BD: 80 0B    JMP   0x04C9             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
04BF: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_1_RX_BUFFER_REG ]          
04C1: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
04C2: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
04C3: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_1_RX_PARITY_ERROR | UART_1_RX_FRAMING_ERROR)
04C5: B0 03    JNZ   0x04C9             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
04C7: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
04C8: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
04C9: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_1_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
04CB: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_1_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_1_iReadChar:
                                        (0814) _UART_1_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
04CC: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
04CE: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_1_RX_ERROR|UART_1_RX_REG_FULL)
04D0: 08       PUSH  A                  (0819)    push A
04D1: 21 08    AND   A,0x8              (0820)    and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
04D3: B0 07    JNZ   0x04DB             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
04D5: 18       POP   A                  (0822)    pop  A
04D6: 29 01    OR    A,0x1              (0823)    or   A,UART_1_RX_NO_DATA                                ; Add no data flag
04D8: 4B       SWAP  A,X                (0824)    swap A,X
04D9: 80 07    JMP   0x04E1             (0825)    jmp  End_UART_1_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
04DB: 18       POP   A                  (0828)    pop  A
04DC: 21 E0    AND   A,0xE0             (0829)    and  A,UART_1_RX_ERROR
04DE: 4B       SWAP  A,X                (0830)    swap A,X
04DF: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_1_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
04E1: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_1_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_1_PutString:
                                        (0867) _UART_1_PutString:
04E2: 70 BF    AND   F,0xBF             (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
04E4: 60 D3    MOV   REG[0xD3],A        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
04E6: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
04E8: A0 06    JZ    0x04EF             (0872)    jz    End_PutString                           ; Check for end of string
04EA: 9F B9    CALL  0x04A5             (0873)    call  UART_1_PutChar                          ; Send character to Tx port
04EC: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
04ED: 8F F8    JMP   0x04E6             (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
04EF: 70 3F    AND   F,0x3F             
04F1: 71 C0    OR    F,0xC0             (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
04F3: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_1_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_1_Write:
                                        (0914) _UART_1_Write:
04F4: 70 BF    AND   F,0xBF             (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
04F6: 62 D3 07 MOV   REG[0xD3],0x7      (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
04F9: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
04FA: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
04FC: A0 1A    JZ    0x0517             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
04FE: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0500: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0502: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0504: 60 D3    MOV   REG[0xD3],A        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0506: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0508: 49 2B 10 TST   REG[0x2B],0x10     
050B: AF FC    JZ    0x0508             
050D: 60 29    MOV   REG[0x29],A        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
050F: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0510: 62 D3 07 MOV   REG[0xD3],0x7      (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0513: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0515: 8F E4    JMP   0x04FA             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
0517: 70 3F    AND   F,0x3F             
0519: 71 C0    OR    F,0xC0             (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
051B: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_1_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_1_CWrite:
                                        (0975) _UART_1_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
051C: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
051D: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0520: B0 06    JNZ   0x0527             (0980)    jnz   .CW_WRITEIT
0522: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0525: A0 1D    JZ    0x0543             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0527: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0528: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
052A: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
052C: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
052D: 49 2B 10 TST   REG[0x2B],0x10     
0530: AF FC    JZ    0x052D             
0532: 60 29    MOV   REG[0x29],A        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0534: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0535: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0538: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
053B: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
053E: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0541: 8F DB    JMP   0x051D             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
0543: 70 3F    AND   F,0x3F             
0545: 71 C0    OR    F,0xC0             (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0547: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_1_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_1_CPutString:
                                        (1027) _UART_1_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0548: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0549: 10       PUSH  X                  (1030)    push  X
054A: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
054B: A0 0B    JZ    0x0557             (1032)    jz    .End_CPutString
054D: 9F 56    CALL  0x04A5             (1033)    call  UART_1_PutChar                          ; Print character
054F: 20       POP   X                  (1034)    pop   X
0550: 18       POP   A                  (1035)    pop   A
0551: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0552: DF F5    JNC   0x0548             (1037)    jnc   UART_1_CPutString                       ; Check for carry
0554: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0555: 8F F2    JMP   0x0548             (1039)    jmp   UART_1_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0557: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0559: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_1_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_1_PutCRLF:
                                        (1071) _UART_1_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
055A: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
055C: 9F 47    CALL  0x04A5             (1074)    call UART_1_PutChar
055E: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0560: 9F 43    CALL  0x04A5             (1076)    call UART_1_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0562: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_1_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_1_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_1_CmdReset:
                                        (1119) _UART_1_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
0563: 62 D0 00 MOV   REG[0xD0],0x0      (1121)    RAM_SETPAGE_CUR >UART_1_aRxBuffer
0566: 55 02 00 MOV   [0x2],0x0          (1122)    mov [UART_1_aRxBuffer], 0x00
0569: 62 D0 00 MOV   REG[0xD0],0x0      (1123)    RAM_SETPAGE_CUR >UART_1_bRxCnt
056C: 55 01 00 MOV   [0x1],0x0          (1124)    mov [UART_1_bRxCnt], 0x00
056F: 26 00 00 AND   [0x0],0x0          (1125)    and [UART_1_fStatus], 0x00
0572: 62 D0 00 MOV   REG[0xD0],0x0      (1126)    RAM_SETPAGE_CUR >ptrParam
0575: 55 21 00 MOV   [0x21],0x0         (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0578: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_1_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_1_bCmdCheck:
                                        (1162) _UART_1_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
0579: 62 D0 00 MOV   REG[0xD0],0x0      (1164)    RAM_SETPAGE_CUR >UART_1_fStatus
057C: 51 00    MOV   A,[0x0]            (1165)    mov A,  [UART_1_fStatus]
057E: 21 01    AND   A,0x1              (1166)    and A, UART_1_RX_BUF_CMDTERM                  ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
0580: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_1_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_1_bErrCheck:
                                        (1206) _UART_1_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
0581: 62 D0 00 MOV   REG[0xD0],0x0      (1208)    RAM_SETPAGE_CUR >UART_1_fStatus
0584: 51 00    MOV   A,[0x0]            (1209)    mov A,  [UART_1_fStatus]
0586: 21 F0    AND   A,0xF0             (1210)    and A, UART_1_RX_BUF_ERROR                    ; Mask off Error status
0588: 26 00 0F AND   [0x0],0xF          (1211)    and [UART_1_fStatus], ~UART_1_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
058B: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_1_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_1_bCmdLength:
                                        (1241) _UART_1_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
058C: 62 D0 00 MOV   REG[0xD0],0x0      (1243)    RAM_SETPAGE_CUR >UART_1_bRxCnt
058F: 51 01    MOV   A,[0x1]            (1244)    mov A,  [UART_1_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
0591: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_1_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART_1 Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_1_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_1_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_1_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_1_szGetParam:
                                        (1299) _UART_1_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
0592: 70 BF    AND   F,0xBF             (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
0594: 62 D0 00 MOV   REG[0xD0],0x0      (1303)    RAM_SETPAGE_CUR >ptrParam
0597: 50 02    MOV   A,0x2              (1304)    mov   A, <UART_1_aRxBuffer               ; Get address to receive buffer
0599: 02 21    ADD   A,[0x21]           (1305)    add   A, [ptrParam]                      ; Add string offset
059B: 5C       MOV   X,A                (1306)    mov   X, A
059C: 62 D3 00 MOV   REG[0xD3],0x0      (1307)    RAM_SETPAGE_IDX >UART_1_aRxBuffer
059F: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
05A1: B0 04    JNZ   0x05A6             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
05A3: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
05A4: 80 33    JMP   0x05D8             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
05A6: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_1_DELIMITER                ; Do we have a delimiter?
05A8: B0 11    JNZ   0x05BA             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
05AA: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
05AB: 76 21    INC   [0x21]             (1318)    inc   [ptrParam]                         ;          the stored pointer.
05AD: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
05AF: 3C 21 0F CMP   [0x21],0xF         (1320)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; End of buffer?
05B2: BF F3    JNZ   0x05A6             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
05B4: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
05B5: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
05B8: 80 1F    JMP   0x05D8             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
05BA: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
05BB: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
05BC: 76 21    INC   [0x21]             (1334)    inc   [ptrParam]
05BE: 3C 21 0F CMP   [0x21],0xF         (1335)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
05C1: AF F3    JZ    0x05B5             (1336)    jz    .TerminateString
05C3: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
05C5: A0 12    JZ    0x05D8             (1338)    jz    .End_GetNextParam
05C7: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_1_DELIMITER                ; Check if we have a delimiter
05C9: BF F1    JNZ   0x05BB             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
05CB: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
05CE: 76 21    INC   [0x21]             (1342)    inc   [ptrParam]
05D0: 3C 21 0F CMP   [0x21],0xF         (1343)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
05D3: B0 04    JNZ   0x05D8             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
05D5: 55 21 0F MOV   [0x21],0xF         (1345)    mov   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
05D8: 20       POP   X                  (1348)    pop   X
05D9: 10       PUSH  X                  (1349)    push  X
05DA: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
05DD: B0 0B    JNZ   0x05E9             (1351)    jnz   .NotNullString
05DF: 20       POP   X                  (1352)    pop   X
05E0: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
05E2: 50 00    MOV   A,0x0              (1354)    mov   A, >UART_1_aRxBuffer
05E4: 70 3F    AND   F,0x3F             
05E6: 71 C0    OR    F,0xC0             (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
05E8: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
05E9: 20       POP   X                  (1360)    pop  X
05EA: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_1_aRxBuffer                ; Return pointer
05EC: 70 3F    AND   F,0x3F             
05EE: 71 C0    OR    F,0xC0             (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
05F0: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_1_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_1_szGetRestOfParams:
                                        (1393) _UART_1_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
05F1: 62 D0 00 MOV   REG[0xD0],0x0      (1395)    RAM_SETPAGE_CUR >ptrParam
05F4: 50 02    MOV   A,0x2              (1396)    mov  A, <UART_1_aRxBuffer                ; Get address to receive buffer
05F6: 02 21    ADD   A,[0x21]           (1397)    add  A, [ptrParam]                       ; Add string offset
05F8: 5C       MOV   X,A                (1398)    mov  X,A
05F9: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_1_aRxBuffer                 ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
05FB: 7F       RET                      (1401)    ret
(1402) .ENDSECTION
(1403) 
(1404) ENDIF
(1405) 
(1406) 
(1407) ; End of File UART_1.asm
FILE: C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
(0001) // I2C-UART master
(0002) // CY8C29466-24PXI(DIP Package)
(0003) // PSoC Designer 5.0 + SP6
(0004) // IMAGECRAFT C Compiler
(0005) 
(0006) #include <m8c.h>        // part specific constants and macros
(0007) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0008) #define _BV(BIT) (1<<BIT)
(0009) #define sbi(BYTE,BIT) (BYTE |= _BV(BIT))
(0010) #define cbi(BYTE,BIT) (BYTE &= ~_BV(BIT))
(0011) #define LED_ON() sbi(PRT2DR, 0)
(0012) #define LED_OFF() cbi(PRT2DR, 0)
(0013) 
(0014) 
(0015) void main(void)
_main|__text_start|_main:
    05FC: 71 01    OR    F,0x1
(0016) {
(0017)     M8C_EnableGInt; // enable global interrupt
(0018)     M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    05FE: 43 E0 20 OR    REG[0xE0],0x20
(0019)     UART_1_CmdReset(); // uart init
    0601: 10       PUSH  X
    0602: 7C 05 63 LCALL 0x0563
    0605: 20       POP   X
(0020)     UART_1_IntCntl(UART_1_ENABLE_RX_INT); // enable receive interrupt
    0606: 10       PUSH  X
    0607: 50 01    MOV   A,0x1
    0609: 7C 04 60 LCALL 0x0460
    060C: 20       POP   X
(0021)     UART_1_Start(UART_1_PARITY_NONE);
    060D: 10       PUSH  X
    060E: 50 00    MOV   A,0x0
    0610: 7C 04 31 LCALL 0x0431
    0613: 20       POP   X
(0022)     LED_ON();
    0614: 43 08 01 OR    REG[0x8],0x1
    0617: 80 0D    JMP   0x0625
(0023) 
(0024)     while(1){
(0025)         UART_1_CPutString("loop\r\n");
    0619: 10       PUSH  X
    061A: 50 01    MOV   A,0x1
    061C: 08       PUSH  A
    061D: 50 B7    MOV   A,0xB7
    061F: 5C       MOV   X,A
    0620: 18       POP   A
    0621: 7C 05 48 LCALL 0x0548
    0624: 20       POP   X
(0026)     }
    0625: 8F F3    JMP   0x0619
    0627: 8F FF    JMP   0x0627
(0027) }
(0028) 
(0029) 
(0030) #pragma interrupt_handler INT_UART_RX
(0031) void INT_UART_RX(void){
_INT_UART_RX:
  recv_data            --> X+0
    0629: 71 C0    OR    F,0xC0
    062B: 08       PUSH  A
    062C: 5D D0    MOV   A,REG[0xD0]
    062E: 08       PUSH  A
    062F: 5D D3    MOV   A,REG[0xD3]
    0631: 08       PUSH  A
    0632: 5D D4    MOV   A,REG[0xD4]
    0634: 08       PUSH  A
    0635: 5D D5    MOV   A,REG[0xD5]
    0637: 08       PUSH  A
    0638: 62 D0 00 MOV   REG[0xD0],0x0
    063B: 51 20    MOV   A,[__r0]
    063D: 08       PUSH  A
    063E: 51 1F    MOV   A,[__r1]
    0640: 08       PUSH  A
    0641: 51 1E    MOV   A,[__r2]
    0643: 08       PUSH  A
    0644: 51 1D    MOV   A,[__r3]
    0646: 08       PUSH  A
    0647: 51 1C    MOV   A,[__r4]
    0649: 08       PUSH  A
    064A: 51 1B    MOV   A,[__r5]
    064C: 08       PUSH  A
    064D: 51 1A    MOV   A,[__r6]
    064F: 08       PUSH  A
    0650: 51 19    MOV   A,[__r7]
    0652: 08       PUSH  A
    0653: 51 18    MOV   A,[__r8]
    0655: 08       PUSH  A
    0656: 51 17    MOV   A,[__r9]
    0658: 08       PUSH  A
    0659: 51 16    MOV   A,[__r10]
    065B: 08       PUSH  A
    065C: 51 15    MOV   A,[__r11]
    065E: 08       PUSH  A
    065F: 51 14    MOV   A,[__rX]
    0661: 08       PUSH  A
    0662: 51 13    MOV   A,[__rY]
    0664: 08       PUSH  A
    0665: 51 12    MOV   A,[__rZ]
    0667: 08       PUSH  A
    0668: 10       PUSH  X
    0669: 4F       MOV   X,SP
    066A: 38 03    ADD   SP,0x3
(0032)     char recv_data;
(0033)     recv_data = UART_1_cGetChar(); // read UART
    066C: 10       PUSH  X
    066D: 7C 04 AD LCALL 0x04AD
    0670: 62 D0 00 MOV   REG[0xD0],0x0
    0673: 20       POP   X
    0674: 54 00    MOV   [X+0],A
(0034)     UART_1_PutChar(recv_data); // echo
    0676: 10       PUSH  X
    0677: 52 00    MOV   A,[X+0]
    0679: 7C 04 A5 LCALL 0x04A5
    067C: 20       POP   X
(0035)     switch(recv_data){
    067D: 52 00    MOV   A,[X+0]
    067F: 54 02    MOV   [X+2],A
    0681: 56 01 00 MOV   [X+1],0x0
    0684: 52 02    MOV   A,[X+2]
    0686: 11 44    SUB   A,0x44
    0688: 62 D0 00 MOV   REG[0xD0],0x0
    068B: 53 13    MOV   [__rY],A
    068D: 52 01    MOV   A,[X+1]
    068F: 31 80    XOR   A,0x80
    0691: 19 80    SBB   A,0x80
    0693: C0 31    JC    0x06C5
    0695: 2A 13    OR    A,[__rY]
    0697: A0 1E    JZ    0x06B6
    0699: 3D 01 00 CMP   [X+1],0x0
    069C: B0 06    JNZ   0x06A3
    069E: 3D 02 55 CMP   [X+2],0x55
    06A1: A0 03    JZ    0x06A5
    06A3: 80 21    JMP   0x06C5
(0036)     case 'U':
(0037)         LED_ON();
    06A5: 43 08 01 OR    REG[0x8],0x1
(0038)         UART_1_CPutString("!Up!");
    06A8: 10       PUSH  X
    06A9: 50 01    MOV   A,0x1
    06AB: 08       PUSH  A
    06AC: 50 B2    MOV   A,0xB2
    06AE: 5C       MOV   X,A
    06AF: 18       POP   A
    06B0: 7C 05 48 LCALL 0x0548
    06B3: 20       POP   X
(0039)         break;
    06B4: 80 10    JMP   0x06C5
(0040)     case 'D':
(0041)         LED_OFF();
    06B6: 41 08 FE AND   REG[0x8],0xFE
(0042)         UART_1_CPutString("!Down!");
    06B9: 10       PUSH  X
    06BA: 50 01    MOV   A,0x1
    06BC: 08       PUSH  A
    06BD: 50 AB    MOV   A,0xAB
    06BF: 5C       MOV   X,A
    06C0: 18       POP   A
    06C1: 7C 05 48 LCALL 0x0548
    06C4: 20       POP   X
(0043)         break;
    06C5: 38 FD    ADD   SP,0xFD
    06C7: 20       POP   X
    06C8: 62 D0 00 MOV   REG[0xD0],0x0
    06CB: 18       POP   A
    06CC: 53 12    MOV   [__rZ],A
    06CE: 18       POP   A
    06CF: 53 13    MOV   [__rY],A
    06D1: 18       POP   A
    06D2: 53 14    MOV   [__rX],A
    06D4: 18       POP   A
    06D5: 53 15    MOV   [__r11],A
    06D7: 18       POP   A
    06D8: 53 16    MOV   [__r10],A
    06DA: 18       POP   A
    06DB: 53 17    MOV   [__r9],A
    06DD: 18       POP   A
    06DE: 53 18    MOV   [__r8],A
    06E0: 18       POP   A
    06E1: 53 19    MOV   [__r7],A
    06E3: 18       POP   A
    06E4: 53 1A    MOV   [__r6],A
    06E6: 18       POP   A
    06E7: 53 1B    MOV   [__r5],A
    06E9: 18       POP   A
    06EA: 53 1C    MOV   [__r4],A
    06EC: 18       POP   A
    06ED: 53 1D    MOV   [__r3],A
    06EF: 18       POP   A
    06F0: 53 1E    MOV   [__r2],A
    06F2: 18       POP   A
    06F3: 53 1F    MOV   [__r1],A
    06F5: 18       POP   A
    06F6: 53 20    MOV   [__r0],A
    06F8: 18       POP   A
    06F9: 60 D5    MOV   REG[0xD5],A
    06FB: 18       POP   A
    06FC: 60 D4    MOV   REG[0xD4],A
    06FE: 18       POP   A
    06FF: 60 D3    MOV   REG[0xD3],A
    0701: 18       POP   A
    0702: 60 D0    MOV   REG[0xD0],A
    0704: 18       POP   A
    0705: 7E       RETI  
(0044)     }
(0045) }
(0046) 
(0047) #pragma interrupt_handler INT_GPIO
(0048) void INT_GPIO(void){
_INT_GPIO:
    0706: 71 C0    OR    F,0xC0
    0708: 08       PUSH  A
    0709: 5D D0    MOV   A,REG[0xD0]
    070B: 08       PUSH  A
    070C: 5D D3    MOV   A,REG[0xD3]
    070E: 08       PUSH  A
    070F: 5D D4    MOV   A,REG[0xD4]
    0711: 08       PUSH  A
    0712: 5D D5    MOV   A,REG[0xD5]
    0714: 08       PUSH  A
    0715: 62 D0 00 MOV   REG[0xD0],0x0
    0718: 51 20    MOV   A,[__r0]
    071A: 08       PUSH  A
    071B: 51 1F    MOV   A,[__r1]
    071D: 08       PUSH  A
    071E: 51 1E    MOV   A,[__r2]
    0720: 08       PUSH  A
    0721: 51 1D    MOV   A,[__r3]
    0723: 08       PUSH  A
    0724: 51 1C    MOV   A,[__r4]
    0726: 08       PUSH  A
    0727: 51 1B    MOV   A,[__r5]
    0729: 08       PUSH  A
    072A: 51 1A    MOV   A,[__r6]
    072C: 08       PUSH  A
    072D: 51 19    MOV   A,[__r7]
    072F: 08       PUSH  A
    0730: 51 18    MOV   A,[__r8]
    0732: 08       PUSH  A
    0733: 51 17    MOV   A,[__r9]
    0735: 08       PUSH  A
    0736: 51 16    MOV   A,[__r10]
    0738: 08       PUSH  A
    0739: 51 15    MOV   A,[__r11]
    073B: 08       PUSH  A
    073C: 51 14    MOV   A,[__rX]
    073E: 08       PUSH  A
    073F: 51 13    MOV   A,[__rY]
    0741: 08       PUSH  A
    0742: 51 12    MOV   A,[__rZ]
    0744: 08       PUSH  A
(0049)   if(PRT2DR & _BV(2)){
    0745: 5D 08    MOV   A,REG[0x8]
    0747: 62 D0 00 MOV   REG[0xD0],0x0
    074A: 53 20    MOV   [__r0],A
    074C: 47 20 04 TST   [__r0],0x4
    074F: A0 12    JZ    0x0762
(0050)     LED_ON();
    0751: 43 08 01 OR    REG[0x8],0x1
(0051)     UART_1_CPutString("ON\r\n");
    0754: 10       PUSH  X
    0755: 50 01    MOV   A,0x1
    0757: 08       PUSH  A
    0758: 50 A6    MOV   A,0xA6
    075A: 5C       MOV   X,A
    075B: 18       POP   A
    075C: 7C 05 48 LCALL 0x0548
    075F: 20       POP   X
(0052)   }
    0760: 80 10    JMP   0x0771
(0053)   else{
(0054)     LED_OFF();
    0762: 41 08 FE AND   REG[0x8],0xFE
(0055)     UART_1_CPutString("OFF\r\n");
    0765: 10       PUSH  X
    0766: 50 01    MOV   A,0x1
    0768: 08       PUSH  A
    0769: 50 A0    MOV   A,0xA0
    076B: 5C       MOV   X,A
    076C: 18       POP   A
    076D: 7C 05 48 LCALL 0x0548
    0770: 20       POP   X
(0056)   }
    0771: 62 D0 00 MOV   REG[0xD0],0x0
    0774: 18       POP   A
    0775: 53 12    MOV   [__rZ],A
    0777: 18       POP   A
    0778: 53 13    MOV   [__rY],A
    077A: 18       POP   A
    077B: 53 14    MOV   [__rX],A
    077D: 18       POP   A
    077E: 53 15    MOV   [__r11],A
    0780: 18       POP   A
    0781: 53 16    MOV   [__r10],A
    0783: 18       POP   A
    0784: 53 17    MOV   [__r9],A
    0786: 18       POP   A
    0787: 53 18    MOV   [__r8],A
    0789: 18       POP   A
    078A: 53 19    MOV   [__r7],A
    078C: 18       POP   A
    078D: 53 1A    MOV   [__r6],A
    078F: 18       POP   A
    0790: 53 1B    MOV   [__r5],A
    0792: 18       POP   A
    0793: 53 1C    MOV   [__r4],A
    0795: 18       POP   A
    0796: 53 1D    MOV   [__r3],A
    0798: 18       POP   A
    0799: 53 1E    MOV   [__r2],A
    079B: 18       POP   A
    079C: 53 1F    MOV   [__r1],A
    079E: 18       POP   A
    079F: 53 20    MOV   [__r0],A
    07A1: 18       POP   A
    07A2: 60 D5    MOV   REG[0xD5],A
    07A4: 18       POP   A
    07A5: 60 D4    MOV   REG[0xD4],A
    07A7: 18       POP   A
    07A8: 60 D3    MOV   REG[0xD3],A
    07AA: 18       POP   A
    07AB: 60 D0    MOV   REG[0xD0],A
    07AD: 18       POP   A
(0057) }
FILE: lib\psocgpioint.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059) 

07AF: 7D 07 06 LJMP  _INT_GPIO          (0060) 	ljmp _INT_GPIO
                                        (0061) 
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ; Insert your custom code above this banner
                                        (0064)    ;---------------------------------------------------
                                        (0065)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0066) 
07B2: 7E       RETI                     (0067)    reti
(0068) 
(0069) 
(0070) ; end of file PSoCGPIOINT.asm
FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.02.004
