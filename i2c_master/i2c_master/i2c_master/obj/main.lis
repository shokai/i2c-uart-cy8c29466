 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 19
 0000           ; // I2C-UART master
 0000           ; // CY8C29466-24PXI(DIP Package)
 0000           ; // PSoC Designer 5.0 + SP6
 0000           ; // IMAGECRAFT C Compiler
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #define _BV(BIT) (1<<BIT)
 0000           ; #define sbi(BYTE,BIT) (BYTE |= _BV(BIT))
 0000           ; #define cbi(BYTE,BIT) (BYTE &= ~_BV(BIT))
 0000           ; #define LED_ON() sbi(PRT2DR, 0)
 0000           ; #define LED_OFF() cbi(PRT2DR, 0)
 0000           ; #define bit_is_set(BYTE, BIT) BYTE & BIT
 0000           ; #define SW_PORT PRT2DR
 0000           ; #define SW_BIT _BV(2) // switch
 0000           ; 
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 20
 0000           ;     M8C_EnableGInt; // enable global interrupt
 0000 7101                      or  F, 01h
 0002           
 0002                   .dbline 21
 0002           ;     M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
 0002 43E020            or REG[0xe0],32
 0005                   .dbline 22
 0005           ;     UART_1_CmdReset(); // uart init
 0005 10                push X
 0006 7C0000            xcall _UART_1_CmdReset
 0009 20                pop X
 000A                   .dbline 23
 000A           ;     UART_1_IntCntl(UART_1_ENABLE_RX_INT); // enable receive interrupt
 000A 10                push X
 000B 5001              mov A,1
 000D 7C0000            xcall _UART_1_IntCntl
 0010 20                pop X
 0011                   .dbline 24
 0011           ;     UART_1_Start(UART_1_PARITY_NONE);
 0011 10                push X
 0012 5000              mov A,0
 0014 7C0000            xcall _UART_1_Start
 0017 20                pop X
 0018                   .dbline 25
 0018           ;     LED_ON();
 0018 430801            or REG[0x8],1
 001B                   .dbline 26
 001B           ;     UART_1_CPutString("start");
 001B 10                push X
 001C 5017              mov A,>L2
 001E 08                push A
 001F 5017              mov A,<L2
 0021 5C                mov X,A
 0022 18                pop A
 0023 7C0000            xcall _UART_1_CPutString
 0026 20                pop X
 0027           L3:
 0027                   .dbline 28
 0027           ; 
 0027           ;     while(1){
 0027                   .dbline 30
 0027           ;         //UART_1_CPutString("loop\r\n");
 0027           ;     }
 0027           L4:
 0027                   .dbline 28
 0027 8FFF              xjmp L3
 0029           X0:
 0029                   .dbline -2
 0029           L1:
 0029                   .dbline 0 ; func end
 0029 8FFF              jmp .
 002B                   .dbend
 002B                   .dbfunc e INT_UART_RX _INT_UART_RX fV
 002B           ;      recv_data -> X+0
 002B           _INT_UART_RX::
 002B                   .dbline -1
 002B 71C0              or F,-64
 002D 08                push A
 002E 5DD0              mov A,REG[0xd0]
 0030 08                push A
 0031 5DD3              mov A,REG[0xd3]
 0033 08                push A
 0034 5DD4              mov A,REG[0xd4]
 0036 08                push A
 0037 5DD5              mov A,REG[0xd5]
 0039 08                push A
 003A 62D000            mov REG[0xd0],>__r0
 003D 5100              mov A,[__r0]
 003F 08                push A
 0040 5100              mov A,[__r1]
 0042 08                push A
 0043 5100              mov A,[__r2]
 0045 08                push A
 0046 5100              mov A,[__r3]
 0048 08                push A
 0049 5100              mov A,[__r4]
 004B 08                push A
 004C 5100              mov A,[__r5]
 004E 08                push A
 004F 5100              mov A,[__r6]
 0051 08                push A
 0052 5100              mov A,[__r7]
 0054 08                push A
 0055 5100              mov A,[__r8]
 0057 08                push A
 0058 5100              mov A,[__r9]
 005A 08                push A
 005B 5100              mov A,[__r10]
 005D 08                push A
 005E 5100              mov A,[__r11]
 0060 08                push A
 0061 5100              mov A,[__rX]
 0063 08                push A
 0064 5100              mov A,[__rY]
 0066 08                push A
 0067 5100              mov A,[__rZ]
 0069 08                push A
 006A 10                push X
 006B 4F                mov X,SP
 006C 3803              add SP,3
 006E                   .dbline 35
 006E           ; }
 006E           ; 
 006E           ; 
 006E           ; #pragma interrupt_handler INT_UART_RX
 006E           ; void INT_UART_RX(void){
 006E                   .dbline 37
 006E           ;     char recv_data;
 006E           ;     recv_data = UART_1_cGetChar(); // read UART
 006E 10                push X
 006F 7C0000            xcall _UART_1_cGetChar
 0072 62D000            mov REG[0xd0],>__r0
 0075 20                pop X
 0076 5400              mov [X+0],A
 0078                   .dbline 38
 0078           ;     UART_1_PutChar(recv_data); // echo
 0078 10                push X
 0079 5200              mov A,[X+0]
 007B 7C0000            xcall _UART_1_PutChar
 007E 20                pop X
 007F                   .dbline 39
 007F           ;     switch(recv_data){
 007F 5200              mov A,[X+0]
 0081 5402              mov [X+2],A
 0083 560100            mov [X+1],0
 0086 5202              mov A,[X+2]
 0088 1144              sub A,68
 008A 62D000            mov REG[0xd0],>__r0
 008D 5300              mov [__rY],A
 008F 5201              mov A,[X+1]
 0091 3180              xor A,-128
 0093 1980              sbb A,(0 ^ 0x80)
 0095 C031              jc L7
 0097 2A00              or A,[__rY]
 0099 A01E              jz L12
 009B           X1:
 009B           L14:
 009B 3D0100            cmp [X+1],0
 009E B006              jnz X2
 00A0 3D0255            cmp [X+2],85
 00A3 A003              jz L10
 00A5           X2:
 00A5 8021              xjmp L7
 00A7           L10:
 00A7                   .dbline 41
 00A7           ;     case 'U':
 00A7           ;         LED_ON();
 00A7 430801            or REG[0x8],1
 00AA                   .dbline 42
 00AA           ;         UART_1_CPutString("!Up!");
 00AA 10                push X
 00AB 5012              mov A,>L11
 00AD 08                push A
 00AE 5012              mov A,<L11
 00B0 5C                mov X,A
 00B1 18                pop A
 00B2 7C0000            xcall _UART_1_CPutString
 00B5 20                pop X
 00B6                   .dbline 43
 00B6           ;         break;
 00B6 8010              xjmp L8
 00B8           L12:
 00B8                   .dbline 45
 00B8           ;     case 'D':
 00B8           ;         LED_OFF();
 00B8 4108FE            and REG[0x8],-2
 00BB                   .dbline 46
 00BB           ;         UART_1_CPutString("!Down!");
 00BB 10                push X
 00BC 500B              mov A,>L13
 00BE 08                push A
 00BF 500B              mov A,<L13
 00C1 5C                mov X,A
 00C2 18                pop A
 00C3 7C0000            xcall _UART_1_CPutString
 00C6 20                pop X
 00C7                   .dbline 47
 00C7           ;         break;
 00C7           L7:
 00C7           L8:
 00C7                   .dbline -2
 00C7           L6:
 00C7 38FD              add SP,-3
 00C9 20                pop X
 00CA 62D000            mov REG[0xD0],>__r0
 00CD 18                pop A
 00CE 5300              mov [__rZ],A
 00D0 18                pop A
 00D1 5300              mov [__rY],A
 00D3 18                pop A
 00D4 5300              mov [__rX],A
 00D6 18                pop A
 00D7 5300              mov [__r11],A
 00D9 18                pop A
 00DA 5300              mov [__r10],A
 00DC 18                pop A
 00DD 5300              mov [__r9],A
 00DF 18                pop A
 00E0 5300              mov [__r8],A
 00E2 18                pop A
 00E3 5300              mov [__r7],A
 00E5 18                pop A
 00E6 5300              mov [__r6],A
 00E8 18                pop A
 00E9 5300              mov [__r5],A
 00EB 18                pop A
 00EC 5300              mov [__r4],A
 00EE 18                pop A
 00EF 5300              mov [__r3],A
 00F1 18                pop A
 00F2 5300              mov [__r2],A
 00F4 18                pop A
 00F5 5300              mov [__r1],A
 00F7 18                pop A
 00F8 5300              mov [__r0],A
 00FA 18                pop A
 00FB 60D5              mov REG[213],A
 00FD 18                pop A
 00FE 60D4              mov REG[212],A
 0100 18                pop A
 0101 60D3              mov REG[211],A
 0103 18                pop A
 0104 60D0              mov REG[208],A
 0106 18                pop A
 0107                   .dbline 0 ; func end
 0107 7E                reti
 0108                   .dbsym l recv_data 0 c
 0108                   .dbend
 0108                   .dbfunc e INT_GPIO _INT_GPIO fV
 0108           _INT_GPIO::
 0108                   .dbline -1
 0108 71C0              or F,-64
 010A 08                push A
 010B 5DD0              mov A,REG[0xd0]
 010D 08                push A
 010E 5DD3              mov A,REG[0xd3]
 0110 08                push A
 0111 5DD4              mov A,REG[0xd4]
 0113 08                push A
 0114 5DD5              mov A,REG[0xd5]
 0116 08                push A
 0117 62D000            mov REG[0xd0],>__r0
 011A 5100              mov A,[__r0]
 011C 08                push A
 011D 5100              mov A,[__r1]
 011F 08                push A
 0120 5100              mov A,[__r2]
 0122 08                push A
 0123 5100              mov A,[__r3]
 0125 08                push A
 0126 5100              mov A,[__r4]
 0128 08                push A
 0129 5100              mov A,[__r5]
 012B 08                push A
 012C 5100              mov A,[__r6]
 012E 08                push A
 012F 5100              mov A,[__r7]
 0131 08                push A
 0132 5100              mov A,[__r8]
 0134 08                push A
 0135 5100              mov A,[__r9]
 0137 08                push A
 0138 5100              mov A,[__r10]
 013A 08                push A
 013B 5100              mov A,[__r11]
 013D 08                push A
 013E 5100              mov A,[__rX]
 0140 08                push A
 0141 5100              mov A,[__rY]
 0143 08                push A
 0144 5100              mov A,[__rZ]
 0146 08                push A
 0147                   .dbline 52
 0147           ;     }
 0147           ; }
 0147           ; 
 0147           ; #pragma interrupt_handler INT_GPIO
 0147           ; void INT_GPIO(void){
 0147                   .dbline 53
 0147           ;     if(bit_is_set(SW_PORT, SW_BIT)){
 0147 5D08              mov A,REG[0x8]
 0149 62D000            mov REG[0xd0],>__r0
 014C 5300              mov [__r0],A
 014E 470004            tst [__r0],4
 0151 A012              jz L16
 0153                   .dbline 53
 0153                   .dbline 54
 0153           ;     LED_ON();
 0153 430801            or REG[0x8],1
 0156                   .dbline 55
 0156           ;     UART_1_CPutString("ON\r\n");
 0156 10                push X
 0157 5006              mov A,>L18
 0159 08                push A
 015A 5006              mov A,<L18
 015C 5C                mov X,A
 015D 18                pop A
 015E 7C0000            xcall _UART_1_CPutString
 0161 20                pop X
 0162                   .dbline 56
 0162           ;   }
 0162 8010              xjmp L17
 0164           L16:
 0164                   .dbline 57
 0164           ;   else{
 0164                   .dbline 58
 0164           ;     LED_OFF();
 0164 4108FE            and REG[0x8],-2
 0167                   .dbline 59
 0167           ;     UART_1_CPutString("OFF\r\n");
 0167 10                push X
 0168 5000              mov A,>L19
 016A 08                push A
 016B 5000              mov A,<L19
 016D 5C                mov X,A
 016E 18                pop A
 016F 7C0000            xcall _UART_1_CPutString
 0172 20                pop X
 0173                   .dbline 60
 0173           ;   }
 0173           L17:
 0173                   .dbline -2
 0173           L15:
 0173 62D000            mov REG[0xD0],>__r0
 0176 18                pop A
 0177 5300              mov [__rZ],A
 0179 18                pop A
 017A 5300              mov [__rY],A
 017C 18                pop A
 017D 5300              mov [__rX],A
 017F 18                pop A
 0180 5300              mov [__r11],A
 0182 18                pop A
 0183 5300              mov [__r10],A
 0185 18                pop A
 0186 5300              mov [__r9],A
 0188 18                pop A
 0189 5300              mov [__r8],A
 018B 18                pop A
 018C 5300              mov [__r7],A
 018E 18                pop A
 018F 5300              mov [__r6],A
 0191 18                pop A
 0192 5300              mov [__r5],A
 0194 18                pop A
 0195 5300              mov [__r4],A
 0197 18                pop A
 0198 5300              mov [__r3],A
 019A 18                pop A
 019B 5300              mov [__r2],A
 019D 18                pop A
 019E 5300              mov [__r1],A
 01A0 18                pop A
 01A1 5300              mov [__r0],A
 01A3 18                pop A
 01A4 60D5              mov REG[213],A
 01A6 18                pop A
 01A7 60D4              mov REG[212],A
 01A9 18                pop A
 01AA 60D3              mov REG[211],A
 01AC 18                pop A
 01AD 60D0              mov REG[208],A
 01AF 18                pop A
 01B0                   .dbline 0 ; func end
 01B0 7E                reti
 01B1                   .dbend
                        .area lit(rom, con, rel)
 0000           L19:
 0000 4F46460D0A00      .byte 'O,'F,'F,13,10,0
 0006           L18:
 0006 4F4E0D0A00        .byte 'O,'N,13,10,0
 000B           L13:
 000B 21446F776E2100    .byte 33,'D,'o,'w,'n,33,0
 0012           L11:
 0012 2155702100        .byte 33,'U,'p,33,0
 0017           L2:
 0017 737461727400      .byte 's,'t,'a,'r,'t,0
