 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3802              add SP,2
 0004                   .dbline 33
 0004           ; // I2C-UART master
 0004           ; // CY8C29466-24PXI(DIP Package)
 0004           ; // PSoC Designer 5.0 + SP6
 0004           ; // IMAGECRAFT C Compiler
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <I2CHW_1Common.h>
 0004           ; #include <I2CHW_1Mstr.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #define _BV(BIT) (1<<BIT)
 0004           ; #define sbi(BYTE,BIT) (BYTE |= _BV(BIT))
 0004           ; #define cbi(BYTE,BIT) (BYTE &= ~_BV(BIT))
 0004           ; 
 0004           ; #define LED_ON() sbi(PRT2DR, 0) // LED
 0004           ; #define LED_OFF() cbi(PRT2DR, 0)
 0004           ; #define LED2_ON() sbi(PRT1DR, 6)
 0004           ; #define LED2_OFF() cbi(PRT1DR, 6)
 0004           ; #define LED3_ON() sbi(PRT1DR, 4)
 0004           ; #define LED3_OFF() cbi(PRT1DR, 4)
 0004           ; 
 0004           ; #define BTN_PORT PRT2DR // push button
 0004           ; #define BTN_BIT _BV(2)
 0004           ; 
 0004           ; #define BUF_SIZE 8
 0004           ; BYTE buf_tx[BUF_SIZE]; // I2C buffer
 0004           ; BYTE buf_rx[BUF_SIZE];
 0004           ; BYTE status; // I2C status
 0004           ; BYTE slave; // slave address
 0004           ; #define I2C_TIMEOUT 128 // 長時間応答が返ってこないslaveデバイスを無視する
 0004           ; BYTE timeout_count, i;
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 34
 0004           ;     M8C_EnableGInt; // enable global interrupt
 0004 7101                      or  F, 01h
 0006           
 0006                   .dbline 35
 0006           ;     M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
 0006 43E020            or REG[0xe0],32
 0009                   .dbline 36
 0009           ;     UART_1_CmdReset(); // uart init
 0009 10                push X
 000A 7C0000            xcall _UART_1_CmdReset
 000D 20                pop X
 000E                   .dbline 37
 000E           ;     UART_1_IntCntl(UART_1_ENABLE_RX_INT); // enable receive interrupt
 000E 10                push X
 000F 5001              mov A,1
 0011 7C0000            xcall _UART_1_IntCntl
 0014 20                pop X
 0015                   .dbline 38
 0015           ;     UART_1_Start(UART_1_PARITY_NONE);
 0015 10                push X
 0016 5000              mov A,0
 0018 7C0000            xcall _UART_1_Start
 001B 20                pop X
 001C                   .dbline 39
 001C           ;     LED_ON();
 001C 430801            or REG[0x8],1
 001F                   .dbline 40
 001F           ;     UART_1_CPutString("start");
 001F 10                push X
 0020 501A              mov A,>L2
 0022 08                push A
 0023 501A              mov A,<L2
 0025 5C                mov X,A
 0026 18                pop A
 0027 7C0000            xcall _UART_1_CPutString
 002A 20                pop X
 002B                   .dbline 41
 002B           ;     LED_OFF();
 002B 4108FE            and REG[0x8],-2
 002E                   .dbline 42
 002E           ;     I2CHW_1_Start();
 002E 10                push X
 002F 7C0000            xcall _I2CHW_1_Start
 0032                   .dbline 43
 0032           ;     I2CHW_1_EnableMstr();
 0032 7C0000            xcall _I2CHW_1_EnableMstr
 0035                   .dbline 44
 0035           ;     I2CHW_1_EnableInt();
 0035 7C0000            xcall _I2CHW_1_EnableInt
 0038 20                pop X
 0039                   .dbline 45
 0039           ;     for(;;){
 0039           L3:
 0039                   .dbline 45
 0039                   .dbline 46
 0039           ;         for(slave = 0x11; slave < 0x21; slave++){
 0039 62D000            mov REG[0xd0],>_slave
 003C 550011            mov [_slave],17
 003F 817C              xjmp L10
 0041           L7:
 0041                   .dbline 46
 0041                   .dbline 47
 0041           ;             I2CHW_1_bWriteBytes(slave, buf_tx, BUF_SIZE, I2CHW_1_CompleteXfer); // master->slave
 0041 10                push X
 0042 5000              mov A,0
 0044 08                push A
 0045 5008              mov A,8
 0047 08                push A
 0048 5000              mov A,>_buf_tx
 004A 08                push A
 004B 5000              mov A,<_buf_tx
 004D 08                push A
 004E 62D000            mov REG[0xd0],>_slave
 0051 5100              mov A,[_slave]
 0053 08                push A
 0054 7C0000            xcall _I2CHW_1_bWriteBytes
 0057 38FB              add SP,-5
 0059 20                pop X
 005A                   .dbline 48
 005A           ;             timeout_count = 0;
 005A 62D000            mov REG[0xd0],>_timeout_count
 005D 550000            mov [_timeout_count],0
 0060                   .dbline 49
 0060           ;             for(;;){
 0060           L11:
 0060                   .dbline 49
 0060                   .dbline 50
 0060           ;                 if(I2CHW_1_bReadI2CStatus() & I2CHW_WR_COMPLETE ||
 0060 10                push X
 0061 7C0000            xcall _I2CHW_1_bReadI2CStatus
 0064 62D000            mov REG[0xd0],>__r0
 0067 20                pop X
 0068 5300              mov [__r0],A
 006A 470040            tst [__r0],64
 006D B028              jnz L17
 006F 62D000            mov REG[0xd0],>_timeout_count
 0072 5100              mov A,[_timeout_count]
 0074 62D000            mov REG[0xd0],>__r0
 0077 5300              mov [__r1],A
 0079 550000            mov [__r0],0
 007C 0101              add A,1
 007E 62D000            mov REG[0xd0],>_timeout_count
 0081 5300              mov [_timeout_count],A
 0083 62D000            mov REG[0xd0],>__r0
 0086 5080              mov A,-128
 0088 1200              sub A,[__r1]
 008A 5000              mov A,0
 008C 3180              xor A,-128
 008E 5300              mov [__rX],A
 0090 5080              mov A,(0 ^ 0x80)
 0092 1A00              sbb A,[__rX]
 0094 DFCB              jnc L11
 0096           X1:
 0096           L17:
 0096                   .dbline 51
 0096           ;                    timeout_count++ > I2C_TIMEOUT) break;
 0096                   .dbline 52
 0096           ;             }
 0096                   .dbline 49
 0096                   .dbline 49
 0096           L13:
 0096                   .dbline 53
 0096           ;             I2CHW_1_ClrWrStatus();
 0096 10                push X
 0097 7C0000            xcall _I2CHW_1_ClrWrStatus
 009A 20                pop X
 009B                   .dbline 55
 009B           ;             
 009B           ;             I2CHW_1_fReadBytes(slave, buf_rx, BUF_SIZE, I2CHW_1_CompleteXfer); // slave->master
 009B 10                push X
 009C 5000              mov A,0
 009E 08                push A
 009F 5008              mov A,8
 00A1 08                push A
 00A2 5000              mov A,>_buf_rx
 00A4 08                push A
 00A5 5000              mov A,<_buf_rx
 00A7 08                push A
 00A8 62D000            mov REG[0xd0],>_slave
 00AB 5100              mov A,[_slave]
 00AD 08                push A
 00AE 7C0000            xcall _I2CHW_1_fReadBytes
 00B1 38FB              add SP,-5
 00B3 20                pop X
 00B4                   .dbline 56
 00B4           ;             timeout_count = 0;
 00B4 62D000            mov REG[0xd0],>_timeout_count
 00B7 550000            mov [_timeout_count],0
 00BA                   .dbline 57
 00BA           ;             for(;;){
 00BA           L18:
 00BA                   .dbline 57
 00BA                   .dbline 58
 00BA           ;                 if(I2CHW_1_bReadI2CStatus() & I2CHW_RD_COMPLETE ||
 00BA 10                push X
 00BB 7C0000            xcall _I2CHW_1_bReadI2CStatus
 00BE 62D000            mov REG[0xd0],>__r0
 00C1 20                pop X
 00C2 5300              mov [__r0],A
 00C4 470004            tst [__r0],4
 00C7 B028              jnz L24
 00C9 62D000            mov REG[0xd0],>_timeout_count
 00CC 5100              mov A,[_timeout_count]
 00CE 62D000            mov REG[0xd0],>__r0
 00D1 5300              mov [__r1],A
 00D3 550000            mov [__r0],0
 00D6 0101              add A,1
 00D8 62D000            mov REG[0xd0],>_timeout_count
 00DB 5300              mov [_timeout_count],A
 00DD 62D000            mov REG[0xd0],>__r0
 00E0 5080              mov A,-128
 00E2 1200              sub A,[__r1]
 00E4 5000              mov A,0
 00E6 3180              xor A,-128
 00E8 5300              mov [__rX],A
 00EA 5080              mov A,(0 ^ 0x80)
 00EC 1A00              sbb A,[__rX]
 00EE DFCB              jnc L18
 00F0           X2:
 00F0           L24:
 00F0                   .dbline 59
 00F0           ;                    timeout_count++ > I2C_TIMEOUT) break;
 00F0                   .dbline 60
 00F0           ;             }
 00F0                   .dbline 57
 00F0                   .dbline 57
 00F0           L20:
 00F0                   .dbline 61
 00F0           ;             I2CHW_1_ClrRdStatus();
 00F0 10                push X
 00F1 7C0000            xcall _I2CHW_1_ClrRdStatus
 00F4 20                pop X
 00F5                   .dbline 63
 00F5           ; 
 00F5           ;             switch(slave){
 00F5 62D000            mov REG[0xd0],>_slave
 00F8 5100              mov A,[_slave]
 00FA 5401              mov [X+1],A
 00FC 560000            mov [X+0],0
 00FF 3D0000            cmp [X+0],0
 0102 B006              jnz X3
 0104 3D0111            cmp [X+1],17
 0107 A00D              jz L28
 0109           X3:
 0109 3D0000            cmp [X+0],0
 010C B006              jnz X4
 010E 3D0112            cmp [X+1],18
 0111 A01D              jz L33
 0113           X4:
 0113 8033              xjmp L39
 0115           L28:
 0115                   .dbline 65
 0115           ;             case 0x11:
 0115           ;                 if(buf_rx[0] == 'u') LED2_OFF();
 0115 62D000            mov REG[0xd0],>_buf_rx
 0118 3C0075            cmp [_buf_rx],117
 011B B006              jnz L29
 011D                   .dbline 65
 011D 4104BF            and REG[0x4],-65
 0120 8026              xjmp L39
 0122           L29:
 0122                   .dbline 66
 0122           ;                 else if(buf_rx[0] == 'd') LED2_ON();
 0122 62D000            mov REG[0xd0],>_buf_rx
 0125 3C0064            cmp [_buf_rx],100
 0128 B01E              jnz L39
 012A                   .dbline 66
 012A 430440            or REG[0x4],64
 012D                   .dbline 67
 012D           ;                 break;
 012D 8019              xjmp L39
 012F           L33:
 012F                   .dbline 69
 012F           ;             case 0x12:
 012F           ;                 if(buf_rx[0] == 'u') LED3_OFF();
 012F 62D000            mov REG[0xd0],>_buf_rx
 0132 3C0075            cmp [_buf_rx],117
 0135 B006              jnz L34
 0137                   .dbline 69
 0137 4104EF            and REG[0x4],-17
 013A 800C              xjmp L39
 013C           L34:
 013C                   .dbline 70
 013C           ;                 else if(buf_rx[0] == 'd') LED3_ON();
 013C 62D000            mov REG[0xd0],>_buf_rx
 013F 3C0064            cmp [_buf_rx],100
 0142 B004              jnz L39
 0144                   .dbline 70
 0144 430410            or REG[0x4],16
 0147                   .dbline 71
 0147           ;                 break;
 0147           L38:
 0147                   .dbline 74
 0147           ;             }
 0147           ;             
 0147           ;             while(!(UART_1_bReadTxStatus() & UART_1_TX_BUFFER_EMPTY)); // slaveからの受信データをシリアル通信出力
 0147           L39:
 0147                   .dbline 74
 0147 10                push X
 0148 7C0000            xcall _UART_1_bReadTxStatus
 014B 62D000            mov REG[0xd0],>__r0
 014E 20                pop X
 014F 5300              mov [__r0],A
 0151 470010            tst [__r0],16
 0154 AFF2              jz L38
 0156                   .dbline 75
 0156           ;             UART_1_CPutString("I2C:");
 0156 10                push X
 0157 5015              mov A,>L41
 0159 08                push A
 015A 5015              mov A,<L41
 015C 5C                mov X,A
 015D 18                pop A
 015E 7C0000            xcall _UART_1_CPutString
 0161 20                pop X
 0162                   .dbline 76
 0162           ;             UART_1_PutSHexByte(slave); // slaveアドレス
 0162 10                push X
 0163 62D000            mov REG[0xd0],>_slave
 0166 5100              mov A,[_slave]
 0168 7C0000            xcall _UART_1_PutSHexByte
 016B 20                pop X
 016C                   .dbline 77
 016C           ;             UART_1_CPutString(",");
 016C 10                push X
 016D 5013              mov A,>L42
 016F 08                push A
 0170 5013              mov A,<L42
 0172 5C                mov X,A
 0173 18                pop A
 0174 7C0000            xcall _UART_1_CPutString
 0177 20                pop X
 0178                   .dbline 78
 0178           ;             UART_1_PutString(buf_rx); // slaveからの受信データ
 0178 10                push X
 0179 5000              mov A,>_buf_rx
 017B 08                push A
 017C 5000              mov A,<_buf_rx
 017E 5C                mov X,A
 017F 18                pop A
 0180 7C0000            xcall _UART_1_PutString
 0183                   .dbline 79
 0183           ;             UART_1_PutCRLF();
 0183 7C0000            xcall _UART_1_PutCRLF
 0186 20                pop X
 0187                   .dbline 80
 0187           ;             for(i = 0; i < BUF_SIZE-1; i++) buf_rx[i] = '\0'; // 受信バッファを初期化
 0187 62D000            mov REG[0xd0],>_i
 018A 550000            mov [_i],0
 018D 8021              xjmp L46
 018F           L43:
 018F                   .dbline 80
 018F 62D000            mov REG[0xd0],>_i
 0192 5100              mov A,[_i]
 0194 62D000            mov REG[0xd0],>__r0
 0197 5300              mov [__r1],A
 0199 550000            mov [__r0],0
 019C 060000            add [__r1],<_buf_rx
 019F 0E0000            adc [__r0],>_buf_rx
 01A2 5100              mov A,[__r0]
 01A4 60D5              mov REG[0xd5],A
 01A6 5000              mov A,0
 01A8 3F00              mvi [__r1],A
 01AA           L44:
 01AA                   .dbline 80
 01AA 62D000            mov REG[0xd0],>_i
 01AD 7600              inc [_i]
 01AF           L46:
 01AF                   .dbline 80
 01AF 62D000            mov REG[0xd0],>_i
 01B2 3C0007            cmp [_i],7
 01B5 CFD9              jc L43
 01B7           X5:
 01B7                   .dbline 81
 01B7           ;         }
 01B7           L8:
 01B7                   .dbline 46
 01B7 62D000            mov REG[0xd0],>_slave
 01BA 7600              inc [_slave]
 01BC           L10:
 01BC                   .dbline 46
 01BC 62D000            mov REG[0xd0],>_slave
 01BF 3C0021            cmp [_slave],33
 01C2 CE7E              jc L7
 01C4           X6:
 01C4                   .dbline 82
 01C4           ;     }
 01C4                   .dbline 45
 01C4                   .dbline 45
 01C4 8E74              xjmp L3
 01C6           X0:
 01C6                   .dbline -2
 01C6           L1:
 01C6 38FE              add SP,-2
 01C8 20                pop X
 01C9                   .dbline 0 ; func end
 01C9 8FFF              jmp .
 01CB                   .dbend
 01CB                   .dbfunc e INT_UART_RX _INT_UART_RX fV
 01CB           ;      recv_data -> X+0
 01CB           _INT_UART_RX::
 01CB                   .dbline -1
 01CB 71C0              or F,-64
 01CD 08                push A
 01CE 5DD0              mov A,REG[0xd0]
 01D0 08                push A
 01D1 5DD3              mov A,REG[0xd3]
 01D3 08                push A
 01D4 5DD4              mov A,REG[0xd4]
 01D6 08                push A
 01D7 5DD5              mov A,REG[0xd5]
 01D9 08                push A
 01DA 62D000            mov REG[0xd0],>__r0
 01DD 5100              mov A,[__r0]
 01DF 08                push A
 01E0 5100              mov A,[__r1]
 01E2 08                push A
 01E3 5100              mov A,[__r2]
 01E5 08                push A
 01E6 5100              mov A,[__r3]
 01E8 08                push A
 01E9 5100              mov A,[__r4]
 01EB 08                push A
 01EC 5100              mov A,[__r5]
 01EE 08                push A
 01EF 5100              mov A,[__r6]
 01F1 08                push A
 01F2 5100              mov A,[__r7]
 01F4 08                push A
 01F5 5100              mov A,[__r8]
 01F7 08                push A
 01F8 5100              mov A,[__r9]
 01FA 08                push A
 01FB 5100              mov A,[__r10]
 01FD 08                push A
 01FE 5100              mov A,[__r11]
 0200 08                push A
 0201 5100              mov A,[__rX]
 0203 08                push A
 0204 5100              mov A,[__rY]
 0206 08                push A
 0207 5100              mov A,[__rZ]
 0209 08                push A
 020A 10                push X
 020B 4F                mov X,SP
 020C 3803              add SP,3
 020E                   .dbline 88
 020E           ; }
 020E           ; 
 020E           ; 
 020E           ; // UART受信割り込み
 020E           ; #pragma interrupt_handler INT_UART_RX
 020E           ; void INT_UART_RX(void){
 020E                   .dbline 90
 020E           ;     char recv_data;
 020E           ;     recv_data = UART_1_cGetChar(); // read UART
 020E 10                push X
 020F 7C0000            xcall _UART_1_cGetChar
 0212 62D000            mov REG[0xd0],>__r0
 0215 20                pop X
 0216 5400              mov [X+0],A
 0218                   .dbline 91
 0218           ;     UART_1_PutChar(recv_data); // echo
 0218 10                push X
 0219 5200              mov A,[X+0]
 021B 7C0000            xcall _UART_1_PutChar
 021E 20                pop X
 021F                   .dbline 92
 021F           ;     switch(recv_data){
 021F 5200              mov A,[X+0]
 0221 5402              mov [X+2],A
 0223 560100            mov [X+1],0
 0226 5202              mov A,[X+2]
 0228 1144              sub A,68
 022A 62D000            mov REG[0xd0],>__r0
 022D 5300              mov [__rY],A
 022F 5201              mov A,[X+1]
 0231 3180              xor A,-128
 0233 1980              sbb A,(0 ^ 0x80)
 0235 C03D              jc L48
 0237 2A00              or A,[__rY]
 0239 A024              jz L53
 023B           X7:
 023B           L55:
 023B 3D0100            cmp [X+1],0
 023E B006              jnz X8
 0240 3D0255            cmp [X+2],85
 0243 A003              jz L51
 0245           X8:
 0245 802D              xjmp L48
 0247           L51:
 0247                   .dbline 94
 0247           ;     case 'U':
 0247           ;         LED_ON();
 0247 430801            or REG[0x8],1
 024A                   .dbline 95
 024A           ;         buf_tx[0] = 'A'; // slaveにLED点灯を指示
 024A 62D000            mov REG[0xd0],>_buf_tx
 024D 550041            mov [_buf_tx],65
 0250                   .dbline 96
 0250           ;         UART_1_CPutString("LED:ON\r\n");
 0250 10                push X
 0251 500A              mov A,>L52
 0253 08                push A
 0254 500A              mov A,<L52
 0256 5C                mov X,A
 0257 18                pop A
 0258 7C0000            xcall _UART_1_CPutString
 025B 20                pop X
 025C                   .dbline 97
 025C           ;         break;
 025C 8016              xjmp L49
 025E           L53:
 025E                   .dbline 99
 025E           ;     case 'D':
 025E           ;         LED_OFF();
 025E 4108FE            and REG[0x8],-2
 0261                   .dbline 100
 0261           ;         buf_tx[0] = 'B'; // slaveにLED消灯を指示
 0261 62D000            mov REG[0xd0],>_buf_tx
 0264 550042            mov [_buf_tx],66
 0267                   .dbline 101
 0267           ;         UART_1_CPutString("LED:OFF\r\n");
 0267 10                push X
 0268 5000              mov A,>L54
 026A 08                push A
 026B 5000              mov A,<L54
 026D 5C                mov X,A
 026E 18                pop A
 026F 7C0000            xcall _UART_1_CPutString
 0272 20                pop X
 0273                   .dbline 102
 0273           ;         break;
 0273           L48:
 0273           L49:
 0273                   .dbline -2
 0273           L47:
 0273 38FD              add SP,-3
 0275 20                pop X
 0276 62D000            mov REG[0xD0],>__r0
 0279 18                pop A
 027A 5300              mov [__rZ],A
 027C 18                pop A
 027D 5300              mov [__rY],A
 027F 18                pop A
 0280 5300              mov [__rX],A
 0282 18                pop A
 0283 5300              mov [__r11],A
 0285 18                pop A
 0286 5300              mov [__r10],A
 0288 18                pop A
 0289 5300              mov [__r9],A
 028B 18                pop A
 028C 5300              mov [__r8],A
 028E 18                pop A
 028F 5300              mov [__r7],A
 0291 18                pop A
 0292 5300              mov [__r6],A
 0294 18                pop A
 0295 5300              mov [__r5],A
 0297 18                pop A
 0298 5300              mov [__r4],A
 029A 18                pop A
 029B 5300              mov [__r3],A
 029D 18                pop A
 029E 5300              mov [__r2],A
 02A0 18                pop A
 02A1 5300              mov [__r1],A
 02A3 18                pop A
 02A4 5300              mov [__r0],A
 02A6 18                pop A
 02A7 60D5              mov REG[213],A
 02A9 18                pop A
 02AA 60D4              mov REG[212],A
 02AC 18                pop A
 02AD 60D3              mov REG[211],A
 02AF 18                pop A
 02B0 60D0              mov REG[208],A
 02B2 18                pop A
 02B3                   .dbline 0 ; func end
 02B3 7E                reti
 02B4                   .dbsym l recv_data 0 c
 02B4                   .dbend
 02B4                   .dbfunc e INT_GPIO _INT_GPIO fV
 02B4           _INT_GPIO::
 02B4                   .dbline -1
 02B4 71C0              or F,-64
 02B6 08                push A
 02B7 5DD0              mov A,REG[0xd0]
 02B9 08                push A
 02BA 5DD3              mov A,REG[0xd3]
 02BC 08                push A
 02BD 5DD4              mov A,REG[0xd4]
 02BF 08                push A
 02C0 5DD5              mov A,REG[0xd5]
 02C2 08                push A
 02C3 62D000            mov REG[0xd0],>__r0
 02C6 5100              mov A,[__r0]
 02C8 08                push A
 02C9 5100              mov A,[__r1]
 02CB 08                push A
 02CC 5100              mov A,[__r2]
 02CE 08                push A
 02CF 5100              mov A,[__r3]
 02D1 08                push A
 02D2 5100              mov A,[__r4]
 02D4 08                push A
 02D5 5100              mov A,[__r5]
 02D7 08                push A
 02D8 5100              mov A,[__r6]
 02DA 08                push A
 02DB 5100              mov A,[__r7]
 02DD 08                push A
 02DE 5100              mov A,[__r8]
 02E0 08                push A
 02E1 5100              mov A,[__r9]
 02E3 08                push A
 02E4 5100              mov A,[__r10]
 02E6 08                push A
 02E7 5100              mov A,[__r11]
 02E9 08                push A
 02EA 5100              mov A,[__rX]
 02EC 08                push A
 02ED 5100              mov A,[__rY]
 02EF 08                push A
 02F0 5100              mov A,[__rZ]
 02F2 08                push A
 02F3                   .dbline 108
 02F3           ;     }
 02F3           ; }
 02F3           ; 
 02F3           ; // I/Oピン状態変化割り込み
 02F3           ; #pragma interrupt_handler INT_GPIO
 02F3           ; void INT_GPIO(void){
 02F3                   .dbline 109
 02F3           ;     if(BTN_PORT & BTN_BIT){ // ボタンが押されている時
 02F3 5D08              mov A,REG[0x8]
 02F5 62D000            mov REG[0xd0],>__r0
 02F8 5300              mov [__r0],A
 02FA 470004            tst [__r0],4
 02FD A018              jz L57
 02FF                   .dbline 109
 02FF                   .dbline 110
 02FF           ;     LED_ON();
 02FF 430801            or REG[0x8],1
 0302                   .dbline 111
 0302           ;     buf_tx[0] = 'A'; // slaveにLED点灯を指示
 0302 62D000            mov REG[0xd0],>_buf_tx
 0305 550041            mov [_buf_tx],65
 0308                   .dbline 112
 0308           ;     UART_1_CPutString("LED:ON\r\n");
 0308 10                push X
 0309 500A              mov A,>L52
 030B 08                push A
 030C 500A              mov A,<L52
 030E 5C                mov X,A
 030F 18                pop A
 0310 7C0000            xcall _UART_1_CPutString
 0313 20                pop X
 0314                   .dbline 113
 0314           ;   }
 0314 8016              xjmp L58
 0316           L57:
 0316                   .dbline 114
 0316           ;   else{
 0316                   .dbline 115
 0316           ;     LED_OFF();
 0316 4108FE            and REG[0x8],-2
 0319                   .dbline 116
 0319           ;     buf_tx[0] = 'B'; // slaveにLED消灯を指示
 0319 62D000            mov REG[0xd0],>_buf_tx
 031C 550042            mov [_buf_tx],66
 031F                   .dbline 117
 031F           ;     UART_1_CPutString("LED:OFF\r\n");
 031F 10                push X
 0320 5000              mov A,>L54
 0322 08                push A
 0323 5000              mov A,<L54
 0325 5C                mov X,A
 0326 18                pop A
 0327 7C0000            xcall _UART_1_CPutString
 032A 20                pop X
 032B                   .dbline 118
 032B           ;   }
 032B           L58:
 032B                   .dbline -2
 032B           L56:
 032B 62D000            mov REG[0xD0],>__r0
 032E 18                pop A
 032F 5300              mov [__rZ],A
 0331 18                pop A
 0332 5300              mov [__rY],A
 0334 18                pop A
 0335 5300              mov [__rX],A
 0337 18                pop A
 0338 5300              mov [__r11],A
 033A 18                pop A
 033B 5300              mov [__r10],A
 033D 18                pop A
 033E 5300              mov [__r9],A
 0340 18                pop A
 0341 5300              mov [__r8],A
 0343 18                pop A
 0344 5300              mov [__r7],A
 0346 18                pop A
 0347 5300              mov [__r6],A
 0349 18                pop A
 034A 5300              mov [__r5],A
 034C 18                pop A
 034D 5300              mov [__r4],A
 034F 18                pop A
 0350 5300              mov [__r3],A
 0352 18                pop A
 0353 5300              mov [__r2],A
 0355 18                pop A
 0356 5300              mov [__r1],A
 0358 18                pop A
 0359 5300              mov [__r0],A
 035B 18                pop A
 035C 60D5              mov REG[213],A
 035E 18                pop A
 035F 60D4              mov REG[212],A
 0361 18                pop A
 0362 60D3              mov REG[211],A
 0364 18                pop A
 0365 60D0              mov REG[208],A
 0367 18                pop A
 0368                   .dbline 0 ; func end
 0368 7E                reti
 0369                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
 0000           _i::
 0000 00                .byte 0
 0001                   .dbsym e i _i c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
 0000           _timeout_count::
 0000 00                .byte 0
 0001                   .dbsym e timeout_count _timeout_count c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
 0000           _slave::
 0000 00                .byte 0
 0001                   .dbsym e slave _slave c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
 0000           _status::
 0000 00                .byte 0
 0001                   .dbsym e status _status c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
 0000           _buf_rx::
 0000 0000000000000000  .byte 0,0,0,0,0,0,0,0
 0008                   .dbsym e buf_rx _buf_rx A[8:8]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\src\psoc\CY8C29~1\designer\i2c-uart\I2C_MA~1\I2C_MA~1\I2C_MA~1\main.c
 0000           _buf_tx::
 0000 0000000000000000  .byte 0,0,0,0,0,0,0,0
 0008                   .dbsym e buf_tx _buf_tx A[8:8]c
                        .area lit(rom, con, rel)
 0000           L54:
 0000 4C45443A4F46460D0A00      .byte 'L,'E,'D,58,'O,'F,'F,13,10,0
 000A           L52:
 000A 4C45443A4F4E0D0A00        .byte 'L,'E,'D,58,'O,'N,13,10,0
 0013           L42:
 0013 2C00              .byte 44,0
 0015           L41:
 0015 4932433A00        .byte 'I,50,'C,58,0
 001A           L2:
 001A 737461727400      .byte 's,'t,'a,'r,'t,0
